=================잘되는 코드

import { uuidv4 } from '@firebase/util';
import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { FaHeart } from 'react-icons/fa';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useState } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';
interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: 123,
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
    useState(initialState);

  const NewBookmark = {
    id: '',
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };

  // // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData[0].id !== id.storeId)

  // 클릭했을 때 북마크에 추가 + 삭제?
  const postBookmarkHandler = async () => {
    // json서버를 열어야함
    await axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
    setNewBookmarkClick(initialState); // 여기 초기값을 현재 유저의 status값으로 바꿔줘야할 듯
    // setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);
    setBookmarkDeleteBtnClick(!NewBookmark.status);
    // true면 북마크 추가 false(bookmarkDeleteBtnClick랑 굳이 비교할 필요가 없음)

    if (NewBookmark.status) {
      alert('북마크에 추가됐어요!');
    } else {
      console.log('북마크 해제됐어요!');
    }

    // 1. 북마크 상태유지
    // 2. 없으면 추가하고 있으면 삭제하고 create, delete - axios

    console.log('detailData', detailData);
    console.log('detailData.id', detailData.id);
    console.log('NewBookmark.storeId', NewBookmark.storeId);
    console.log(
      '================bookmarkDeleteBtnClick',
      bookmarkDeleteBtnClick,
    );
    console.log('================NewBookmark.status', NewBookmark.status);
  };
  // const bookmarkDeleteBtn = () => {
  //   setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);

  //   console.log('bookmarkDeleteBtnClick', bookmarkDeleteBtnClick);
  // };

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}

                    {/* // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData.id !== id.storeId)
  {} */}
                  </S.SideTitleText>
                </S.BookmarkClick>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;

{
  /* <S.OperationPeriodWrap>
              <S.OperationPeriodTitle>운영기간 : </S.OperationPeriodTitle>
              <S.OperationPeriodText>
                {`${detailData.open} ~ ${detailData.close}`}
              </S.OperationPeriodText>
            </S.OperationPeriodWrap>
            <S.OpeningHoursWrap>
              <S.OpeningHoursTitle>운영시간 : </S.OpeningHoursTitle>
              <S.OpeningHoursBox>
                {detailData.openingTime?.map((openTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {openTime + '-'}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
              <S.OpeningHoursBox>
                {detailData.closeTime?.map((closeTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {' '}
                    {closeTime}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
            </S.OpeningHoursWrap>
            <S.AddressWrap>
              <S.AddressTitle>위치 : </S.AddressTitle>
              <S.AddressText>{detailData.address}</S.AddressText>
            </S.AddressWrap>
            <S.ExplainWrap>
              <S.ExplainTitle>스토어 설명 :</S.ExplainTitle>
              <S.ExplainText> {detailData.explain}</S.ExplainText>
            </S.ExplainWrap>
            <S.SNSWrap>
              <S.SNSTitle>sns 계정 : </S.SNSTitle>{' '}
              <S.SNSText>
                <Link to={detailData.sns} target="_blank">
                  인스타그램
                </Link>
              </S.SNSText>
            </S.SNSWrap>
            <S.BrandPageWrap>
              <S.BrandTitle>브랜드 페이지 : </S.BrandTitle>{' '}
              <S.BrandText>
                <Link to={detailData.web} target="_blank">
                  브랜드홈페이지
                </Link>
              </S.BrandText>
            </S.BrandPageWrap> */
}

{
  /* <S.BrandPageWrap>
        <S.BrandTitle>예약</S.BrandTitle>
        <S.BrandText>
          <Link to={detailData.reserveURL} target="_blank">
            예약 홈페이지
          </Link>
        </S.BrandText>
      </S.BrandPageWrap>
      <KakaoShare detailData={detailData} />
      <DetailWeather /> */
}


=====================axios if문 고치는 중

import { uuidv4 } from '@firebase/util';
import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { FaHeart } from 'react-icons/fa';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useState } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';

interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: 123,
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
    useState(initialState);

  const NewBookmark = {
    id: '',
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };

  // // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData[0].id !== id.storeId)

  // 클릭했을 때 북마크에 추가 + 삭제?
  // 1. 북마크 상태유지
  // 2. 없으면 추가하고 있으면 삭제하고 create, delete - axios
  const postBookmarkHandler = async () => {
    // json서버에 추가하기 전에 내가 추가할 북마크가 있는지 없는지 확인하기
    // json서버를 열어야함
    console.log('NewBookmark.storeId', NewBookmark.storeId);
if(NewBookmark.storeId) {
await axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
    setNewBookmarkClick(initialState); // 여기 초기값을 현재 유저의 status값으로 바꿔줘야할 듯
    // setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);
    setBookmarkDeleteBtnClick(!NewBookmark.status);
    // true면 북마크 추가 false(bookmarkDeleteBtnClick랑 굳이 비교할 필요가 없음)

}
    

    if (NewBookmark.status) {
      alert('북마크에 추가됐어요!');
    } else {
      console.log('북마크 해제됐어요!');
    }

    console.log('detailData', detailData);
    console.log('detailData.id', detailData.id);
    console.log('NewBookmark.storeId', NewBookmark.storeId);
    console.log(
      '================bookmarkDeleteBtnClick',
      bookmarkDeleteBtnClick,
    );
    console.log('================NewBookmark.status', NewBookmark.status);
  };
  // const bookmarkDeleteBtn = () => {
  //   setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);

  //   console.log('bookmarkDeleteBtnClick', bookmarkDeleteBtnClick);
  // };

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}

                    {/* // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData.id !== id.storeId)
  {} */}
                  </S.SideTitleText>
                </S.BookmarkClick>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;

{
  /* <S.OperationPeriodWrap>
              <S.OperationPeriodTitle>운영기간 : </S.OperationPeriodTitle>
              <S.OperationPeriodText>
                {`${detailData.open} ~ ${detailData.close}`}
              </S.OperationPeriodText>
            </S.OperationPeriodWrap>
            <S.OpeningHoursWrap>
              <S.OpeningHoursTitle>운영시간 : </S.OpeningHoursTitle>
              <S.OpeningHoursBox>
                {detailData.openingTime?.map((openTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {openTime + '-'}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
              <S.OpeningHoursBox>
                {detailData.closeTime?.map((closeTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {' '}
                    {closeTime}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
            </S.OpeningHoursWrap>
            <S.AddressWrap>
              <S.AddressTitle>위치 : </S.AddressTitle>
              <S.AddressText>{detailData.address}</S.AddressText>
            </S.AddressWrap>
            <S.ExplainWrap>
              <S.ExplainTitle>스토어 설명 :</S.ExplainTitle>
              <S.ExplainText> {detailData.explain}</S.ExplainText>
            </S.ExplainWrap>
            <S.SNSWrap>
              <S.SNSTitle>sns 계정 : </S.SNSTitle>{' '}
              <S.SNSText>
                <Link to={detailData.sns} target="_blank">
                  인스타그램
                </Link>
              </S.SNSText>
            </S.SNSWrap>
            <S.BrandPageWrap>
              <S.BrandTitle>브랜드 페이지 : </S.BrandTitle>{' '}
              <S.BrandText>
                <Link to={detailData.web} target="_blank">
                  브랜드홈페이지
                </Link>
              </S.BrandText>
            </S.BrandPageWrap> */
}

{
  /* <S.BrandPageWrap>
        <S.BrandTitle>예약</S.BrandTitle>
        <S.BrandText>
          <Link to={detailData.reserveURL} target="_blank">
            예약 홈페이지
          </Link>
        </S.BrandText>
      </S.BrandPageWrap>
      <KakaoShare detailData={detailData} />
      <DetailWeather /> */
}



====================================axios if문 코드 

import { uuidv4 } from '@firebase/util';
import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { FaHeart } from 'react-icons/fa';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useState } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';

interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: 123,
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
    useState(initialState);

  const NewBookmark = {
    id: '',
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };

  // // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData[0].id !== id.storeId)

  // 클릭했을 때 북마크에 추가 + 삭제?
  // 1. 북마크 상태유지
  // 2. 없으면 추가하고 있으면 삭제하고 create, delete - axios
  const postBookmarkHandler = async () => {
    // json서버에 추가하기 전에 내가 추가할 북마크가 있는지 없는지 확인하기
    // json서버를 열어야함
    console.log('NewBookmark.storeId', !NewBookmark.storeId);
    if (!NewBookmark.storeId) {
      await axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);

      setNewBookmarkClick(initialState); // 여기 초기값을 현재 유저의 status값으로 바꿔줘야할 듯
      // setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);
      setBookmarkDeleteBtnClick(!NewBookmark.status);
      alert('북마크에 이미 있어요!');
    } else {
      alert('북마크 추가!');
    }
    // true면 북마크 추가 false(bookmarkDeleteBtnClick랑 굳이 비교할 필요가 없음)
    // if (NewBookmark.status) {
    //   alert('북마크에 추가됐어요!');
    // } else {
    //   console.log('북마크 해제됐어요!');
    // }

    console.log('detailData', detailData);
    console.log('detailData.id', detailData.id);
    console.log('NewBookmark.storeId', NewBookmark.storeId);
    console.log(
      '================bookmarkDeleteBtnClick',
      bookmarkDeleteBtnClick,
    );
    console.log('================NewBookmark.status', NewBookmark.status);
  };
  // const bookmarkDeleteBtn = () => {
  //   setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);

  //   console.log('bookmarkDeleteBtnClick', bookmarkDeleteBtnClick);
  // };

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}

                    {/* // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData.id !== id.storeId)
  {} */}
                  </S.SideTitleText>
                </S.BookmarkClick>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;

{
  /* <S.OperationPeriodWrap>
              <S.OperationPeriodTitle>운영기간 : </S.OperationPeriodTitle>
              <S.OperationPeriodText>
                {`${detailData.open} ~ ${detailData.close}`}
              </S.OperationPeriodText>
            </S.OperationPeriodWrap>
            <S.OpeningHoursWrap>
              <S.OpeningHoursTitle>운영시간 : </S.OpeningHoursTitle>
              <S.OpeningHoursBox>
                {detailData.openingTime?.map((openTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {openTime + '-'}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
              <S.OpeningHoursBox>
                {detailData.closeTime?.map((closeTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {' '}
                    {closeTime}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
            </S.OpeningHoursWrap>
            <S.AddressWrap>
              <S.AddressTitle>위치 : </S.AddressTitle>
              <S.AddressText>{detailData.address}</S.AddressText>
            </S.AddressWrap>
            <S.ExplainWrap>
              <S.ExplainTitle>스토어 설명 :</S.ExplainTitle>
              <S.ExplainText> {detailData.explain}</S.ExplainText>
            </S.ExplainWrap>
            <S.SNSWrap>
              <S.SNSTitle>sns 계정 : </S.SNSTitle>{' '}
              <S.SNSText>
                <Link to={detailData.sns} target="_blank">
                  인스타그램
                </Link>
              </S.SNSText>
            </S.SNSWrap>
            <S.BrandPageWrap>
              <S.BrandTitle>브랜드 페이지 : </S.BrandTitle>{' '}
              <S.BrandText>
                <Link to={detailData.web} target="_blank">
                  브랜드홈페이지
                </Link>
              </S.BrandText>
            </S.BrandPageWrap> */
}

{
  /* <S.BrandPageWrap>
        <S.BrandTitle>예약</S.BrandTitle>
        <S.BrandText>
          <Link to={detailData.reserveURL} target="_blank">
            예약 홈페이지
          </Link>
        </S.BrandText>
      </S.BrandPageWrap>
      <KakaoShare detailData={detailData} />
      <DetailWeather /> */
}

=========================================================이것도 망함 

import { uuidv4 } from '@firebase/util';
import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { FaHeart } from 'react-icons/fa';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useState } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';
interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: 123,
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
    useState(initialState);

  const NewBookmark = {
    id: '',
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };

  // // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData[0].id !== id.storeId)

  // 클릭했을 때 북마크에 추가 + 삭제?
  const postBookmarkHandler = async () => {
    // NewBookmark.storeId와 디테일 페이지의 스토어id와 다르면 추가해줘
    if (NewBookmark.storeId == detailData.id) {
      alert('북마크 삭제');
    } else if (NewBookmark.storeId !== detailData.id) {
      // json서버를 열어야함
      await axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
      setNewBookmarkClick(initialState);
      // setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);
      setBookmarkDeleteBtnClick(!NewBookmark.status);
      // true면 북마크 추가 false(bookmarkDeleteBtnClick랑 굳이 비교할 필요가 없음)
      // if (NewBookmark.status) {
      //   alert('북마크에 추가됐어요!');
      // } else {
      //   console.log('북마크 해제됐어요!');
      // }
    } else alert('그럼 어쩌라고');
  };
  // const bookmarkDeleteBtn = () => {
  //   setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);

  //   console.log('bookmarkDeleteBtnClick', bookmarkDeleteBtnClick);
  // }; console.log('detailData.id', detailData.id);
  console.log('================bookmarkDeleteBtnClick', bookmarkDeleteBtnClick);
  console.log('================NewBookmark.status', NewBookmark.status);

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}
                  </S.SideTitleText>
                </S.BookmarkClick>
                <S.SideTitleText>북마크</S.SideTitleText>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;

{
  /* <S.OperationPeriodWrap>
              <S.OperationPeriodTitle>운영기간 : </S.OperationPeriodTitle>
              <S.OperationPeriodText>
                {`${detailData.open} ~ ${detailData.close}`}
              </S.OperationPeriodText>
            </S.OperationPeriodWrap>
            <S.OpeningHoursWrap>
              <S.OpeningHoursTitle>운영시간 : </S.OpeningHoursTitle>
              <S.OpeningHoursBox>
                {detailData.openingTime?.map((openTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {openTime + '-'}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
              <S.OpeningHoursBox>
                {detailData.closeTime?.map((closeTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {' '}
                    {closeTime}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
            </S.OpeningHoursWrap>
            <S.AddressWrap>
              <S.AddressTitle>위치 : </S.AddressTitle>
              <S.AddressText>{detailData.address}</S.AddressText>
            </S.AddressWrap>
            <S.ExplainWrap>
              <S.ExplainTitle>스토어 설명 :</S.ExplainTitle>
              <S.ExplainText> {detailData.explain}</S.ExplainText>
            </S.ExplainWrap>
            <S.SNSWrap>
              <S.SNSTitle>sns 계정 : </S.SNSTitle>{' '}
              <S.SNSText>
                <Link to={detailData.sns} target="_blank">
                  인스타그램
                </Link>
              </S.SNSText>
            </S.SNSWrap>
            <S.BrandPageWrap>
              <S.BrandTitle>브랜드 페이지 : </S.BrandTitle>{' '}
              <S.BrandText>
                <Link to={detailData.web} target="_blank">
                  브랜드홈페이지
                </Link>
              </S.BrandText>
            </S.BrandPageWrap> */
}

{
  /* <S.BrandPageWrap>
        <S.BrandTitle>예약</S.BrandTitle>
        <S.BrandText>
          <Link to={detailData.reserveURL} target="_blank">
            예약 홈페이지
          </Link>
        </S.BrandText>
      </S.BrandPageWrap>
      <KakaoShare detailData={detailData} />
      <DetailWeather /> */
}

========================================

import { uuidv4 } from '@firebase/util';
import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { FaHeart } from 'react-icons/fa';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useState } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';
interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: 123,
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
    useState(initialState);

  const NewBookmark = {
    id: '',
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };

  // // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData[0].id !== id.storeId)

  // 클릭했을 때 북마크에 추가 + 삭제?
  const postBookmarkHandler = async () => {
    await axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
    setNewBookmarkClick(initialState);
    // setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);
    setBookmarkDeleteBtnClick(!NewBookmark.status);
    if (NewBookmark.storeId !== detailData.id) {
      console.log('NewBookmark.storeId', NewBookmark.storeId);
      console.log('detailData.id', detailData.id);
      // json서버를 열어야함

      // true면 북마크 추가 false(bookmarkDeleteBtnClick랑 굳이 비교할 필요가 없음)
      // if (NewBookmark.status) {
      //   alert('북마크에 추가됐어요!');
      // } else {
      //   console.log('북마크 해제됐어요!');
      // }

      // console.log('detailData', detailData);
      // console.log(
      //   '================bookmarkDeleteBtnClick',
      //   bookmarkDeleteBtnClick,
      // );
      // console.log('================NewBookmark.status', NewBookmark.status);
    } else {
      alert('몰라');
    }
  };
  // const bookmarkDeleteBtn = () => {
  //   setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);

  //   console.log('bookmarkDeleteBtnClick', bookmarkDeleteBtnClick);
  // };

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}
                  </S.SideTitleText>
                </S.BookmarkClick>
                <S.SideTitleText>북마크</S.SideTitleText>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;

{
  /* <S.OperationPeriodWrap>
              <S.OperationPeriodTitle>운영기간 : </S.OperationPeriodTitle>
              <S.OperationPeriodText>
                {`${detailData.open} ~ ${detailData.close}`}
              </S.OperationPeriodText>
            </S.OperationPeriodWrap>
            <S.OpeningHoursWrap>
              <S.OpeningHoursTitle>운영시간 : </S.OpeningHoursTitle>
              <S.OpeningHoursBox>
                {detailData.openingTime?.map((openTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {openTime + '-'}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
              <S.OpeningHoursBox>
                {detailData.closeTime?.map((closeTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {' '}
                    {closeTime}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
            </S.OpeningHoursWrap>
            <S.AddressWrap>
              <S.AddressTitle>위치 : </S.AddressTitle>
              <S.AddressText>{detailData.address}</S.AddressText>
            </S.AddressWrap>
            <S.ExplainWrap>
              <S.ExplainTitle>스토어 설명 :</S.ExplainTitle>
              <S.ExplainText> {detailData.explain}</S.ExplainText>
            </S.ExplainWrap>
            <S.SNSWrap>
              <S.SNSTitle>sns 계정 : </S.SNSTitle>{' '}
              <S.SNSText>
                <Link to={detailData.sns} target="_blank">
                  인스타그램
                </Link>
              </S.SNSText>
            </S.SNSWrap>
            <S.BrandPageWrap>
              <S.BrandTitle>브랜드 페이지 : </S.BrandTitle>{' '}
              <S.BrandText>
                <Link to={detailData.web} target="_blank">
                  브랜드홈페이지
                </Link>
              </S.BrandText>
            </S.BrandPageWrap> */
}

{
  /* <S.BrandPageWrap>
        <S.BrandTitle>예약</S.BrandTitle>
        <S.BrandText>
          <Link to={detailData.reserveURL} target="_blank">
            예약 홈페이지
          </Link>
        </S.BrandText>
      </S.BrandPageWrap>
      <KakaoShare detailData={detailData} />
      <DetailWeather /> */
}


==============엑시오스로 bookmarklist 받아온거까지 함

import { uuidv4 } from '@firebase/util';
import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { FaHeart } from 'react-icons/fa';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useEffect, useState } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';

interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: 123,
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
    useState(initialState);

  const NewBookmark = {
    id: '',
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };


  // 클릭했을 때 북마크에 추가 + 삭제?
  const postBookmarkHandler = async (e: any) => {
    console.log('detailData', detailData);
    // 북마크리스트를 다 가져와서 bookmarklist.map을 돌려서 id를 하나하나 비교해준다.
// 북마크리스트 가져옴 
    axios.get('http://localhost:3011/BookMarkList').then((bookmarklist) => {
      console.log('bookmarklist', bookmarklist);
      console.log('bookmarklist.data[0].id', bookmarklist.data[0].id);
    });

    // 북마크 리스트에 있는 스토어아이디와 detaildata에서 받아온 store아이디가 다르면서,
    // NewBookmark.status가 true면 db에 올려줘라
    // NewBookmark.storeId == detailData.id
    // 현재스토어의 데이터

    // detailData는 현재 스토어의 정보

    // 희라님이랑 짠 코드
    // detailData.map((data: any) => {
    //   if (data.id === NewBookmark.storeId) {
    //     return
    //     // if (data.userId === auth.currentUser?.uid) {
    //     //   await axios.delete(
    //     //     `http://localhost:3011/BookMarkList/${data.id}`,
    //     //   );
    //     // } else {
    //     //   await axios.post(`http://localhost:3011/BookMarkList`, data);
    //     // }
    //   } else {
    //     // json서버를 열어야함
    //     console.log('NewBookmark.id', data.id);

    //     axios.post(`http://localhost:3011/BookMarkList`, data);
    //     setNewBookmarkClick(initialState); // 여기 초기값을 현재 유저의 status값으로 바꿔줘야할 듯
    //     setBookmarkDeleteBtnClick(!NewBookmark.status);
    //   }
    // });
    useEffect(() => {
      auth.onAuthStateChanged((user) => {
        if (!user) {
          return;
        }
      });
    }, []);
    // 1. 북마크 상태유지
    // 2. 없으면 추가하고 있으면 삭제하고 create, delete - axios

    console.log('detailData.id', detailData.id);
    console.log('NewBookmark.storeId', NewBookmark.storeId);
    console.log(
      '================bookmarkDeleteBtnClick',
      bookmarkDeleteBtnClick,
    );
    console.log('================NewBookmark.status', NewBookmark.status);
  };
  // const bookmarkDeleteBtn = () => {
  //   setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);

  //   console.log('bookmarkDeleteBtnClick', bookmarkDeleteBtnClick);
  // };

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}

                    {/* // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData.id !== id.storeId)
  {} */}
                  </S.SideTitleText>
                </S.BookmarkClick>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;

{
  /* <S.OperationPeriodWrap>
              <S.OperationPeriodTitle>운영기간 : </S.OperationPeriodTitle>
              <S.OperationPeriodText>
                {`${detailData.open} ~ ${detailData.close}`}
              </S.OperationPeriodText>
            </S.OperationPeriodWrap>
            <S.OpeningHoursWrap>
              <S.OpeningHoursTitle>운영시간 : </S.OpeningHoursTitle>
              <S.OpeningHoursBox>
                {detailData.openingTime?.map((openTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {openTime + '-'}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
              <S.OpeningHoursBox>
                {detailData.closeTime?.map((closeTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {' '}
                    {closeTime}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
            </S.OpeningHoursWrap>
            <S.AddressWrap>
              <S.AddressTitle>위치 : </S.AddressTitle>
              <S.AddressText>{detailData.address}</S.AddressText>
            </S.AddressWrap>
            <S.ExplainWrap>
              <S.ExplainTitle>스토어 설명 :</S.ExplainTitle>
              <S.ExplainText> {detailData.explain}</S.ExplainText>
            </S.ExplainWrap>
            <S.SNSWrap>
              <S.SNSTitle>sns 계정 : </S.SNSTitle>{' '}
              <S.SNSText>
                <Link to={detailData.sns} target="_blank">
                  인스타그램
                </Link>
              </S.SNSText>
            </S.SNSWrap>
            <S.BrandPageWrap>
              <S.BrandTitle>브랜드 페이지 : </S.BrandTitle>{' '}
              <S.BrandText>
                <Link to={detailData.web} target="_blank">
                  브랜드홈페이지
                </Link>
              </S.BrandText>
            </S.BrandPageWrap> */
}

{
  /* <S.BrandPageWrap>
        <S.BrandTitle>예약</S.BrandTitle>
        <S.BrandText>
          <Link to={detailData.reserveURL} target="_blank">
            예약 홈페이지
          </Link>
        </S.BrandText>
      </S.BrandPageWrap>
      <KakaoShare detailData={detailData} />
      <DetailWeather /> */
}

============================================어제 밤에 희라님이랑 했던 에러나는 코드 

import { uuidv4 } from '@firebase/util';
import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useEffect, useState } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';

interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: 123,
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };
  console.log('detailData==============', detailData);

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
    useState(initialState);

  const NewBookmark = {
    id: detailData.id,
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };
  const [bookmarkData, setBookmarkData] = useState<any>('');
  console.log('bookmarkData', bookmarkData);

  const fetchBookmarks = async () => {
    const { data } = await axios.get('http://localhost:3011/BookMarkList');
    setBookmarkData(data);
  };

  console.log('bookmarkData===================', bookmarkData);
  const checkBookmark = () => {};

  useEffect(() => {
    fetchBookmarks();
    checkBookmark();
  }, []);
  // 클릭했을 때 북마크에 추가 + 삭제?
  const postBookmarkHandler = async (e: any) => {
    console.log('post');
    const [currentUser, setCurrentUser] = useState<any>();

    // useEffect(() => {
    //   auth.onAuthStateChanged((user) => {
    //     if (!user) {
    //       return;
    //     } else {
    //       setCurrentUser(user);
    //     }
    //   });
    // }, [currentUser]);

    bookmarkData.map((bookmark: any) => {
      if (bookmark.id === detailData.id) {
        // 현재 페이지의 스토어와 북마크 리스트에 있는 스토어가 같은 경우
        console.log('북마크아이디가같음');

        if (bookmark.userId === auth.currentUser?.uid) {
          // 현재 유저가 북마크한 경우
          console.log('유저아이디가같음');
          try {
            // axios.delete(`http://localhost:3011/BookMarkList`, bookmark.id);
          } catch (err) {
            console.log('err', err);
          }
        } else {
          // 추가
          console.log('유저아이디가없음');
          try {
            axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
          } catch (err) {
            console.log('err', err);
          }
          // setNewBookmarkClick(initialState); // 여기 초기값을 현재 유저의 status값으로 바꿔줘야할 듯
          // setBookmarkDeleteBtnClick(!NewBookmark.status);
        }
      } else {
        console.log('아무가거너ㅏㄴ아ㅏㅇ');

        // 추가
        try {
          axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
        } catch (err) {
          console.log('err', err);
        }
      }
    });
    // console.log('detailData', detailData);
    // 북마크리스트를 다 가져와서 bookmarklist.map을 돌려서 id를 하나하나 비교해준다.
    // 북마크리스트 가져옴
    // 북마크 db 불러옴
    // 북마크 리스트에 있는 스토어아이디와 detaildata에서 받아온 store아이디가 다르면서,
    // NewBookmark.status가 true면 db에 올려줘라
    // NewBookmark.storeId == detailData.id
    // 현재스토어의 데이터
    // detailData는 현재 스토어의 정보
    // 희라님이랑 짠 코드
    // detailData.map((data: any) => {
    //   if (data.id === NewBookmark.storeId) {
    //     return
    //     // if (data.userId === auth.currentUser?.uid) {
    //     //   await axios.delete(
    //     //     `http://localhost:3011/BookMarkList/${data.id}`,
    //     //   );
    //     // } else {
    //     //   await axios.post(`http://localhost:3011/BookMarkList`, data);
    //     // }
    //   } else {
    //     // json서버를 열어야함
    //     console.log('NewBookmark.id', data.id);
    //     axios.post(`http://localhost:3011/BookMarkList`, data);
    //     setNewBookmarkClick(initialState); // 여기 초기값을 현재 유저의 status값으로 바꿔줘야할 듯
    //     setBookmarkDeleteBtnClick(!NewBookmark.status);
    //   }
    // });
    // useEffect(() => {
    //   bookmarkListData:any()
    //   auth.onAuthStateChanged((user) => {
    //     if (!user) {
    //       return;
    //     }
    //   });
    // }, []);
    // 1. 북마크 상태유지
    // 2. 없으면 추가하고 있으면 삭제하고 create, delete - axios
    // console.log('detailData.id', detailData.id);
    // console.log('NewBookmark.storeId', NewBookmark.storeId);
    // console.log(
    //   '================bookmarkDeleteBtnClick',
    //   bookmarkDeleteBtnClick,
    // );
    // console.log('================NewBookmark.status', NewBookmark.status);
  };
  // const bookmarkDeleteBtn = () => {
  //   setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);

  //   console.log('bookmarkDeleteBtnClick', bookmarkDeleteBtnClick);
  // };

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}

                    {/* // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData.id !== id.storeId)
  {} */}
                  </S.SideTitleText>
                </S.BookmarkClick>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;

{
  /* <S.OperationPeriodWrap>
              <S.OperationPeriodTitle>운영기간 : </S.OperationPeriodTitle>
              <S.OperationPeriodText>
                {`${detailData.open} ~ ${detailData.close}`}
              </S.OperationPeriodText>
            </S.OperationPeriodWrap>
            <S.OpeningHoursWrap>
              <S.OpeningHoursTitle>운영시간 : </S.OpeningHoursTitle>
              <S.OpeningHoursBox>
                {detailData.openingTime?.map((openTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {openTime + '-'}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
              <S.OpeningHoursBox>
                {detailData.closeTime?.map((closeTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {' '}
                    {closeTime}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
            </S.OpeningHoursWrap>
            <S.AddressWrap>
              <S.AddressTitle>위치 : </S.AddressTitle>
              <S.AddressText>{detailData.address}</S.AddressText>
            </S.AddressWrap>
            <S.ExplainWrap>
              <S.ExplainTitle>스토어 설명 :</S.ExplainTitle>
              <S.ExplainText> {detailData.explain}</S.ExplainText>
            </S.ExplainWrap>
            <S.SNSWrap>
              <S.SNSTitle>sns 계정 : </S.SNSTitle>{' '}
              <S.SNSText>
                <Link to={detailData.sns} target="_blank">
                  인스타그램
                </Link>
              </S.SNSText>
            </S.SNSWrap>
            <S.BrandPageWrap>
              <S.BrandTitle>브랜드 페이지 : </S.BrandTitle>{' '}
              <S.BrandText>
                <Link to={detailData.web} target="_blank">
                  브랜드홈페이지
                </Link>
              </S.BrandText>
            </S.BrandPageWrap> */
}

{
  /* <S.BrandPageWrap>
        <S.BrandTitle>예약</S.BrandTitle>
        <S.BrandText>
          <Link to={detailData.reserveURL} target="_blank">
            예약 홈페이지
          </Link>
        </S.BrandText>
      </S.BrandPageWrap>
      <KakaoShare detailData={detailData} />
      <DetailWeather /> */
}
===============================지은님이랑 하다만 코드 
import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useEffect, useState } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';
import { v4 as uuidv4 } from 'uuid';

interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: 123,
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };
  console.log('detailData==============', detailData);

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
    useState(initialState);

  const NewBookmark = {
    id: uuidv4(),
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };

  // 북마크 리스트에 있는 북마크 db
  // bookmarkData.id = 북마크리스트에 있는 스토어의 아이디
  const [bookmarkData, setBookmarkData] = useState<any>('');
  console.log('bookmarkData', bookmarkData);

  const fetchBookmarks = async () => {
    const { data } = await axios.get('http://localhost:3011/BookMarkList');
    setBookmarkData(data);
    console.log('data!!!!!!!!!!!!!!!!!!!!!!!!!!!', data);
  };

  console.log('bookmarkData===================', bookmarkData);
  const checkBookmark = () => {};

  useEffect(() => {
    fetchBookmarks();
    checkBookmark();
  }, []);

  // 클릭했을 때 북마크에 추가 + 삭제?
  const postBookmarkHandler = async (e: any) => {
    // const [currentUser, setCurrentUser] = useState<any>();
    // 북마크 db map돌리기
    // detailData.id = 현재 보고 있는 스토어 아이디
    bookmarkData.map((bookmark: any) => {
      console.log('bookmark!!!!!!!!!!!!!!!!!!!!!', bookmark);
      if (bookmark.id === detailData.id) {
        // 현재 페이지의 스토어와 북마크 리스트에 있는 스토어가 같은 경우
        console.log('북마크아이디가같음');

        if (bookmark.userId === auth.currentUser?.uid) {
          // 현재 유저가 북마크한 경우
          console.log('유저아이디가같음');
          try {
            axios.delete(`http://localhost:3011/BookMarkList/${bookmark.id}`);
          } catch (err) {
            console.log('err', err);
          }
        } else {
          // 추가
          console.log('유저아이디가없음');
          try {
            // axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
            console.log('유저아이디가 다르니까 북마크에 추가');
          } catch (err) {
            console.log('err', err);
          }
          // setNewBookmarkClick(initialState); // 여기 초기값을 현재 유저의 status값으로 바꿔줘야할 듯
          // setBookmarkDeleteBtnClick(!NewBookmark.status);
        }
      } else {
        console.log('아무가거너ㅏㄴ아ㅏㅇ');

        // 추가
        try {
          axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
        } catch (err) {
          console.log('err', err);
        }
      }
    });
  };

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}

                    {/* // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData.id !== id.storeId)
  {} */}
                  </S.SideTitleText>
                </S.BookmarkClick>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;



======================================

import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { FaHeart } from 'react-icons/fa';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useState, useEffect } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';
import { v4 as uuidv4 } from 'uuid';

interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: '',
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  // const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
  //   useState(initialState);

  const NewBookmark = {
    id: uuidv4(),
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };

  // 북마크 리스트에 있는 북마크 db
  // bookmarkData.id = 북마크 리스트에 있는 스토어의 아이디
  const [bookmarkData, setBookmarkData] = useState<any>('');
  console.log('bookmarkData', bookmarkData);

  const fetchBookmarks = async () => {
    const { data } = await axios.get('http://localhost:3011/BookMarkList');
    setBookmarkData(data);
    console.log('data', data);
  };

  useEffect(() => {
    fetchBookmarks();
  }, []);

  console.log('auth.currentUser.uid', auth.currentUser?.uid);
  // 클릭했을 때 북마크에 추가 + 삭제
  // bookmarkData.id = 북마크리스트에 있는 스토어의 uuid
  // detailData.id = 현재 보고 있는 스토어 아이디
  const postBookmarkHandler = async () => {
    // 보내면 이 유저가 쓴것 , 유저가 쓴 북마크데이터
    // 그 중에서 detail아이디랑 일치하는 게 있는지 확인하고
    // 없으면 추가, 있으면 제거
    axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
    // 추가를 해주면 set을 해줘야함
    setNewBookmarkClick(initialState);


    // bookmarkData.map((bookmark: any) => {
    //   console.log('bookmark.storeId', bookmark.storeId);
    //   console.log('detailData.id', detailData.id);
    //   // 북마크리스트에 있는 storeId와 현재 보고 있는 스토어 아이디가 다르다면
    //   if (
    //     bookmark.storeId !== detailData.id &&
    //     bookmark.userId !== auth.currentUser?.uid
    //   ) {
    //     console.log(
    //       '🐣북마크리스트에 있는 storeId와 현재 보고 있는 storeId가 다르니까 추가해주지마🐣',
    //     );

    !!!액시오스 포스트해주기 


    //     // store아이디가 다르면서 유저아이디가 같으면
    //     // 북마크리스트에 있는 userId=== 현재 로그인한 유저
    //     // if (bookmark.userId === auth.currentUser?.uid) {
    //     //   console.log(
    //     //     '🐧북마크리스트에 있는 storeId와 현재 보고 있는 storeId가 다르면서 / 북마크리스트에 있는 userId와 지금 로그인 되어있는 userId가 같으면 추가해달라궁🐧',
    //     //   );
    //     //   try {
    //     //     axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
    //     //   } catch (err) {
    //     //     console.log('92번!!!!!!!');
    //     //     console.log('err', err);
    //     //   }
    //     // } else {
    //     //   console.log(
    //     //     '😾북마크리스트에 있는 storeId와 현재 보고 있는 storeId가 다르지만 / 북마크리스트에 있는 userId와 지금 로그인 되어있는 userId가 다르니까 추가하면 안된다궁😾',
    //     //   );
    //     // } // 여기까진 성공!!
    //     // 북마크리스트에 있는 storeId와 현재 보고 있는 storeId가 같다면?
    //   } else {
    //     try {
    //       axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
    //     } catch (err) {
    //       console.log('92번!!!!!!!');
    //       console.log('err', err);
    //     }
    //     console.log(
    //       '북마크리스트에 있는 storeId와 현재 보고 있는 storeId가 같으니까 이미 북마크리스트에 있는 스토어아이디가 같은 북마크리스트 데이터는 삭제해줘',
    //     );
    //     // try {
    //     //   axios.delete(`http://localhost:3011/BookMarkList/${bookmark.id}`);
    //     // } catch (err) {
    //     //   console.log('err', err);
    //     // }
    //   }
    // });
  };
  // const bookmarkDeleteBtn = () => {
  //   setBookmarkDeleteBtnClick(!bookmarkDeleteBtnClick);

  //   console.log('bookmarkDeleteBtnClick', bookmarkDeleteBtnClick);
  // };

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}

                    {/* // 리스트에 있는 storeId값과 지금 선택한 detailData.id값 일치하면 출력 금지
  //         .filter((id) => detailData.id !== id.storeId)
  {} */}
                  </S.SideTitleText>
                </S.BookmarkClick>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;

{
  /* <S.OperationPeriodWrap>
              <S.OperationPeriodTitle>운영기간 : </S.OperationPeriodTitle>
              <S.OperationPeriodText>
                {`${detailData.open} ~ ${detailData.close}`}
              </S.OperationPeriodText>
            </S.OperationPeriodWrap>
            <S.OpeningHoursWrap>
              <S.OpeningHoursTitle>운영시간 : </S.OpeningHoursTitle>
              <S.OpeningHoursBox>
                {detailData.openingTime?.map((openTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {openTime + '-'}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
              <S.OpeningHoursBox>
                {detailData.closeTime?.map((closeTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {' '}
                    {closeTime}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
            </S.OpeningHoursWrap>
            <S.AddressWrap>
              <S.AddressTitle>위치 : </S.AddressTitle>
              <S.AddressText>{detailData.address}</S.AddressText>
            </S.AddressWrap>
            <S.ExplainWrap>
              <S.ExplainTitle>스토어 설명 :</S.ExplainTitle>
              <S.ExplainText> {detailData.explain}</S.ExplainText>
            </S.ExplainWrap>
            <S.SNSWrap>
              <S.SNSTitle>sns 계정 : </S.SNSTitle>{' '}
              <S.SNSText>
                <Link to={detailData.sns} target="_blank">
                  인스타그램
                </Link>
              </S.SNSText>
            </S.SNSWrap>
            <S.BrandPageWrap>
              <S.BrandTitle>브랜드 페이지 : </S.BrandTitle>{' '}
              <S.BrandText>
                <Link to={detailData.web} target="_blank">
                  브랜드홈페이지
                </Link>
              </S.BrandText>
            </S.BrandPageWrap> */
}

{
  /* <S.BrandPageWrap>
        <S.BrandTitle>예약</S.BrandTitle>
        <S.BrandText>
          <Link to={detailData.reserveURL} target="_blank">
            예약 홈페이지
          </Link>
        </S.BrandText>
      </S.BrandPageWrap>
      <KakaoShare detailData={detailData} />
      <DetailWeather /> */
}



======================================== 

import { Link } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import StoreDetailImg from '../StoreDetailImg/StoreDetailImg';
import DetailWeather from './DetailWeather';
import KakaoShare from './KakaoShare';
import * as S from './style';
import { TbClock } from 'react-icons/tb';
import { MdIosShare } from 'react-icons/md';
import { FaHeart } from 'react-icons/fa';
import { BsInstagram, BsGlobe, BsFillSunFill } from 'react-icons/bs';
import StoreEmoji from '../StoreEmoji/StoreEmoji';
import { useState, useEffect } from 'react';
import axios from 'axios';
import { auth } from '../../../services/firebase';
import { BsBookmark, BsBookmarkFill } from 'react-icons/bs';
import { v4 as uuidv4 } from 'uuid';

interface Props {
  detailData: any;
}
// detailData로 이미 store의 데이터를 불러오고 있다.
// detailData = popupStore.json 데이터 객체 하나
const StoreDetailInfo = ({ detailData }: Props) => {
  const initialState = {
    id: '',
    storeId: '',
    userId: '',
    notification: false,
    title: '',
    open: '',
    close: '',
    imgURL: '',
    status: false,
  };

  // 여기서 버튼 클릭하면 추가되게
  const [newBookmarkClick, setNewBookmarkClick] = useState(initialState);
  // 북마크 true, false 상태값
  const [bookmarkDeleteBtnClick, setBookmarkDeleteBtnClick] = useState(true);
  // 북마크 삭제하고 삭제된 북마크 빼고 리스트 불러오기
  // const [bookmarkDeleteClickList, setBookmarkDeleteClickList] =
  //   useState(initialState);

  const NewBookmark = {
    id: uuidv4(),
    storeId: detailData.id,
    userId: auth.currentUser?.uid,
    notification: false,
    title: detailData.title,
    open: detailData.open,
    close: detailData.close,
    imgURL: detailData.imgURL[0],
    status: bookmarkDeleteBtnClick, // 북마크의 바뀐 상태 true, false
  };

  // 북마크 리스트에 있는 북마크 db
  // bookmarkData.id = 북마크 리스트에 있는 스토어의 아이디
  const [bookmarkData, setBookmarkData] = useState<any>('');
  console.log('bookmarkData', bookmarkData);

  const fetchBookmarks = async () => {
    const { data } = await axios.get('http://localhost:3011/BookMarkList');
    setBookmarkData(data);
    console.log('data', data);
  };

  useEffect(() => {
    fetchBookmarks();
  }, []);

  console.log('auth.currentUser.uid', auth.currentUser?.uid);
  // 클릭했을 때 북마크에 추가 + 삭제
  // bookmarkData.id = 북마크리스트에 있는 스토어의 uuid
  // detailData.id = 현재 보고 있는 스토어 아이디
  const postBookmarkHandler = async () => {
    bookmarkData.map((bookmark: any) => {
      console.log('bookmark.id', bookmark.id);

      if (
        bookmark.storeId !== detailData.id &&
        bookmark.userId !== auth.currentUser?.uid
      ) {
        try {
          axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
          setNewBookmarkClick(initialState);
        } catch (err) {
          console.log('92번!!!!!!!');
          console.log('err', err);
        }
      } else {
        try {
          axios.delete(`http://localhost:3011/BookMarkList/${bookmark.id}`);
        } catch (err) {
          console.log('err', err);
        }
      }
    });
    // 보내면 이 유저가 쓴것 , 유저가 쓴 북마크데이터
    // 그 중에서 detail아이디랑 일치하는 게 있는지 확인하고
    // 없으면 추가, 있으면 제거
    // axios.post(`http://localhost:3011/BookMarkList`, NewBookmark);
    // 추가를 해주면 set을 해줘야함
  };

  return (
    <S.StoreDetailInfoWrap>
      <S.DetailContainer>
        {/* 이미지 슬라이드 컴포넌트 */}
        <StoreDetailImg />
        {/* 디테일 정보 부분 (이모티콘 위 하단선까지) */}
        <S.DetailInfoContent>
          <S.TitleWrap>
            <S.Title>{detailData?.title}</S.Title>
            <S.SideTitleWrap>
              <S.SideTitleIconText>
                <S.SideTitleIcon>{detailData?.view.all}</S.SideTitleIcon>
                <S.SideTitleText>조회수</S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <TbClock />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  <Link
                    to={detailData?.reserveURL}
                    target="_blank"
                    style={{ color: 'black', textDecoration: 'none' }}
                  >
                    예약
                  </Link>
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                <S.SideTitleIcon>
                  <MdIosShare />
                </S.SideTitleIcon>
                <S.SideTitleText>
                  {/* 공유 */}
                  <KakaoShare detailData={detailData} />
                </S.SideTitleText>
              </S.SideTitleIconText>
              <S.SideTitleIconText>
                {/* 북마크 */}

                <S.BookmarkClick
                  onClick={postBookmarkHandler}
                  style={{
                    border: 'none',
                    backgroundColor: 'transparent',
                    cursor: 'pointer',
                  }}
                >
                  <S.SideTitleText>
                    {bookmarkDeleteBtnClick ? (
                      <BsBookmark />
                    ) : (
                      <BsBookmarkFill />
                    )}
                  </S.SideTitleText>
                </S.BookmarkClick>
              </S.SideTitleIconText>
            </S.SideTitleWrap>
          </S.TitleWrap>
          <S.InfoContentWrap>
            <S.InfoTable>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영기간</S.InfoTitleText>
                  <S.InfoContentText>{`${detailData?.open} ~ ${detailData?.close}`}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>운영시간</S.InfoTitleText>
                  <S.OpeningHoursWrap>
                    <S.OpeningHoursBox>
                      {detailData?.openingTime?.map((openTime: string) => {
                        return <span key={uuidv4()}>{openTime + '-'}</span>;
                      })}
                    </S.OpeningHoursBox>
                    <S.OpeningHoursBox>
                      {detailData?.closeTime?.map((closeTime: string) => {
                        return <span key={uuidv4()}>{closeTime}</span>;
                      })}
                    </S.OpeningHoursBox>
                  </S.OpeningHoursWrap>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>주소</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.address}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>날씨</S.InfoTitleText>
                  <S.InfoContentText>
                    <BsFillSunFill />
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>스토어 설명</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.explain}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>SNS계정</S.InfoTitleText>
                  <S.InfoContentText>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.sns}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsInstagram />
                      </Link>
                    </S.SnsLinkWrap>
                    <S.SnsLinkWrap>
                      <Link
                        to={detailData?.web}
                        target="_blank"
                        style={{ color: 'black' }}
                      >
                        <BsGlobe />
                      </Link>
                    </S.SnsLinkWrap>
                  </S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
              <S.InfoTbody>
                <S.InfoTr>
                  <S.InfoTitleText>카테고리</S.InfoTitleText>
                  <S.InfoContentText>{detailData?.item}</S.InfoContentText>
                </S.InfoTr>
              </S.InfoTbody>
            </S.InfoTable>
          </S.InfoContentWrap>
        </S.DetailInfoContent>
      </S.DetailContainer>
      {/* 하단 선 */}
      <S.Hr />
      {/* 좋아요/별로에요 이모티콘 컴포넌트 */}
      <StoreEmoji />
    </S.StoreDetailInfoWrap>
  );
};

export default StoreDetailInfo;

{
  /* <S.OperationPeriodWrap>
              <S.OperationPeriodTitle>운영기간 : </S.OperationPeriodTitle>
              <S.OperationPeriodText>
                {`${detailData.open} ~ ${detailData.close}`}
              </S.OperationPeriodText>
            </S.OperationPeriodWrap>
            <S.OpeningHoursWrap>
              <S.OpeningHoursTitle>운영시간 : </S.OpeningHoursTitle>
              <S.OpeningHoursBox>
                {detailData.openingTime?.map((openTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {openTime + '-'}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
              <S.OpeningHoursBox>
                {detailData.closeTime?.map((closeTime: string) => (
                  <S.OpeningHoursText key={uuidv4()}>
                    {' '}
                    {closeTime}
                  </S.OpeningHoursText>
                ))}
              </S.OpeningHoursBox>
            </S.OpeningHoursWrap>
            <S.AddressWrap>
              <S.AddressTitle>위치 : </S.AddressTitle>
              <S.AddressText>{detailData.address}</S.AddressText>
            </S.AddressWrap>
            <S.ExplainWrap>
              <S.ExplainTitle>스토어 설명 :</S.ExplainTitle>
              <S.ExplainText> {detailData.explain}</S.ExplainText>
            </S.ExplainWrap>
            <S.SNSWrap>
              <S.SNSTitle>sns 계정 : </S.SNSTitle>{' '}
              <S.SNSText>
                <Link to={detailData.sns} target="_blank">
                  인스타그램
                </Link>
              </S.SNSText>
            </S.SNSWrap>
            <S.BrandPageWrap>
              <S.BrandTitle>브랜드 페이지 : </S.BrandTitle>{' '}
              <S.BrandText>
                <Link to={detailData.web} target="_blank">
                  브랜드홈페이지
                </Link>
              </S.BrandText>
            </S.BrandPageWrap> */
}

{
  /* <S.BrandPageWrap>
        <S.BrandTitle>예약</S.BrandTitle>
        <S.BrandText>
          <Link to={detailData.reserveURL} target="_blank">
            예약 홈페이지
          </Link>
        </S.BrandText>
      </S.BrandPageWrap>
      <KakaoShare detailData={detailData} />
      <DetailWeather /> */
}
