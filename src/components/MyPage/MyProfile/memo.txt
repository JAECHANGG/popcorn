======================원래 잘 되는 코드


import { useEffect, useState } from 'react';
import { auth } from '../../../services/firebase';
import * as S from './style';
import MyPageTab from '../MyPageTab/MyPageTab';
import DeleteAccount from '../../Authentication/DeleteAccount/DeleteAccount';
import MyProfileEditModal from './MyProfileEditModal';
import { useRecoilState } from 'recoil';
import { editModal, profileState } from '../../../atoms';
import { useRecoilValue } from 'recoil';
import { userInfo } from '../../../atoms';
const MyProfile = () => {
  const user = useRecoilValue(userInfo);
  const userInfos = user.userInfomation;

  const [open, setOpen] = useRecoilState(editModal);
  const handleOpen = () => setOpen(true);
  const [nickname, setNickname] = useState<any>(''); // 닉네임
  const [currentUser, setCurrentUser] = useState<any>('');
  const imgProfileUrl = useRecoilValue(profileState);
  const [imgUploadUrl, setImgUploadUrl] = useState<any>(); // 업로드한 이미지 url
  useEffect(() => {
    auth.currentUser?.photoURL;
    if (currentUser?.photoURL) {
      setImgUploadUrl(currentUser.photoURL);
    }
  }, [currentUser, nickname]);

  // 현재 로그인한 사용자 가져오기
  useEffect(() => {
    auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(auth.currentUser);
        setImgUploadUrl(user.photoURL);
      } else {
        return console.log('로그인 안됨');
      }
    });
  }, [currentUser]);

  useEffect(() => {
    setImgUploadUrl(currentUser.photoURL);
  }, []);

  return (
    <S.MyPageAll>
      <S.MyPageContainer>
        <S.MyProfileBox>
          <S.NewProfileSubmitForm>
            <S.ProfileImgLabelInputWrapper>
              <S.ProfileImgLabel htmlFor="profileUploadImg">
                <S.ProfileImgShow src={imgProfileUrl} onClick={handleOpen} />
              </S.ProfileImgLabel>
              <S.ProfileImgInput
                accept="image/*"
                id="profileUploadImg"
                style={{ display: 'none' }}
              />
            </S.ProfileImgLabelInputWrapper>
            <S.MyProfileNickname>{currentUser.displayName}</S.MyProfileNickname>

            <S.NicknameInputWrapper>
              <S.NicknameText>닉네임</S.NicknameText>
              <S.NicknameInput
                type="text"
                placeholder={currentUser.displayName}
                value={nickname}
              />
            </S.NicknameInputWrapper>
            <S.EmailInputWrpper>
              <S.EmailText>이메일</S.EmailText>
              <S.EmailInput placeholder={currentUser.email} readOnly />
            </S.EmailInputWrpper>
            <S.PhoneNumInputWrpper>
              <S.PhoneNumText>휴대전화</S.PhoneNumText>
              <S.PhoneNumInputDiv>{userInfos.phoneNumber}</S.PhoneNumInputDiv>
            </S.PhoneNumInputWrpper>
            <S.GenderInputWrpper>
              <S.GenderText>성별</S.GenderText>
              <S.GenderInputDiv>{userInfos.gender}</S.GenderInputDiv>
            </S.GenderInputWrpper>
            <S.AgeInputWrpper>
              <S.AgeText>생일</S.AgeText>
              <S.AgeInputDiv>{userInfos.age}</S.AgeInputDiv>
            </S.AgeInputWrpper>
            <S.ModifyCompleteButton type="button">
              <MyProfileEditModal />
            </S.ModifyCompleteButton>
          </S.NewProfileSubmitForm>
          <DeleteAccount />
        </S.MyProfileBox>
      </S.MyPageContainer>
      <MyPageTab />
    </S.MyPageAll>
  );
};

export default MyProfile;



// MyProfileEditModal.tsx

import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Modal from '@mui/material/Modal';
import { useEffect, useState } from 'react';
import { auth, storage } from '../../../services/firebase';
import { updateProfile } from 'firebase/auth';
import { getDownloadURL, ref, uploadString } from 'firebase/storage';
import { v4 as uuidv4 } from 'uuid';
import * as S from './style';
import UpdatePassword from '../../Authentication/UpdatePassword/UpdatePassword';
import { useRecoilState, useRecoilValue } from 'recoil';
import { editModal } from '../../../atoms';
import { profileState } from '../../../atoms';

const MyProfileEditModal = () => {
  const [profileUrl, setProfileUrl] = useRecoilState(profileState);

  // 모달 관련
  const [open, setOpen] = useRecoilState(editModal);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  // 닉네임 관련
  const currentUserInfos = auth.currentUser; // 현재 로그인한 사용자의 정보들(파이어베이스)
  const [nickname, setNickname] = useState<any>(''); // 현재 닉네임 상태변경
  const [currentUser, setCurrentUser] = useState<any>(''); // 현재 로그인한 사용자 가져오기 및 변경 전 데이터

  // 이미지 관련
  const imgProfileUrl = useRecoilValue(profileState);
  const [imgFile, setImgFile] = useState<any>(imgProfileUrl); // 이미지 파일 엄청 긴 이름
  const [imgFileName, setImgFileName] = useState<any>(''); // 이미지 파일 이름.jpg
  const [imgUploadUrl, setImgUploadUrl] = useState<any>('');

  // 현재 로그인한 사용자 가져오기
  useEffect(() => {
    auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(currentUserInfos);
      } else {
        return console.log('로그인 안됨');
      }
    });
  }, [currentUser]);

  // 변경할 닉네임 받아오는 함수
  // 변경눌렀을 때 마이페이지 업뎃되면 닉네임은 끝난거
  const ToChangeNicknameInput = (event: any) => {
    setNickname(event.target.value);
  };

  // 수정완료 버튼 누를 때 유효성 검사 확인만
  const nicknameChangeOnClick = async (e: any) => {
    if (nickname.length < 2 || nickname.length > 5) {
      alert('2글자 이상 5글자 이하로 입력해주세요.');
      return;
    } else if (imgFile.length === 0) {
      setImgUploadUrl(
        'https://firebasestorage.googleapis.com/v0/b/popcorn1-4b47e.appspot.com/o/basic_profile.png?alt=media&token=d58d0f49-79bd-400a-a4ae-ceca444734ae',
      );
    } else if (imgFile.length !== 0) {
      const imgRef = ref(storage, `profileUploadImg/${imgFileName + uuidv4()}`);
      const response = await uploadString(imgRef, imgFile, 'data_url');
      const downloadImageUrl = await getDownloadURL(response.ref);
      setImgUploadUrl(downloadImageUrl);
      setProfileUrl(downloadImageUrl);
    }

    await updateProfile(currentUser, {
      displayName: nickname,
      photoURL: imgUploadUrl,
    })
      .then(() => {
        setNickname(nickname);
        alert('프로필 수정 완료!');
        setOpen(false);
      })
      .catch((error: any) => {
        error;
      });
  };

  // 모달키면 이미지가 보이는데 유저가 클릭하면 업데이트
  const saveNewProfileImg = (event: any) => {
    const target = event.currentTarget;
    const theFile = (target.files as FileList)[0]; // 이미지 인풋창에서 클릭하면 이미지
    setImgFile(theFile.name);
    const reader = new FileReader();
    reader.readAsDataURL(theFile);
    reader.onloadend = (finishedEvent: any) => {
      setImgFile(finishedEvent.currentTarget.result);
    };
  };

  return (
    <div>
      <Button
        onClick={handleOpen}
        style={{
          width: '33%;',
          height: '40px',
        }}
      >
        <S.EditModalBtnText>회원정보수정</S.EditModalBtnText>
      </Button>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <S.EditModalAll>
          <Box sx={style}>
            <S.EditModalTitleText>회원정보 수정</S.EditModalTitleText>
            <S.EditModalImgLabelInputWrapper>
              <S.EditModalProfileImgLabel htmlFor="modalProfileUploadImg">
                {imgFile && <S.EditModalProfileImgShow src={imgFile} />}
              </S.EditModalProfileImgLabel>
              <S.EditModalProfileImgInput
                type="file"
                accept="image/*"
                id="modalProfileUploadImg"
                onChange={saveNewProfileImg}
                style={{ display: 'none' }}
              />
            </S.EditModalImgLabelInputWrapper>
            <S.EditModalNicknameInputWrapper>
              <S.EditModalNicknameText>닉네임</S.EditModalNicknameText>
              <S.EditModalNicknameInput
                type="text"
                placeholder={'닉네임을 입력해주세요'}
                onChange={ToChangeNicknameInput}
                value={nickname}
              />
            </S.EditModalNicknameInputWrapper>
            <S.EditModalEmailInputWrpper>
              <S.EditModalEmailText>이메일(아이디)</S.EditModalEmailText>
              <S.EditModalEmailInput
                placeholder={currentUser?.email}
                readOnly
              />
            </S.EditModalEmailInputWrpper>
            <UpdatePassword />
            <S.EditModalBtnWrapper>
              <S.EditModalCanceleButton onClick={handleClose}>
                취소
              </S.EditModalCanceleButton>

              <S.EditModalCompleteButton
                onClick={nicknameChangeOnClick}
                type="submit"
              >
                수정완료
              </S.EditModalCompleteButton>
            </S.EditModalBtnWrapper>
          </Box>
        </S.EditModalAll>
      </Modal>
    </div>
  );
};
export default MyProfileEditModal;

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '30%',
  height: '800px',
  bgcolor: 'background.paper',
  border: '2px solid transparent',
  boxShadow: 24,
  p: 4,
};



=========================성완님이랑고치다만코드

import { useEffect, useState } from 'react';
import { auth, storage } from '../../../services/firebase';
import * as S from './style';
import MyPageTab from '../MyPageTab/MyPageTab';
import DeleteAccount from '../../Authentication/DeleteAccount/DeleteAccount';
import MyProfileEditModal from './MyProfileEditModal';
import { useRecoilState } from 'recoil';
import { editModal, profileState, userUrl } from '../../../atoms';
import { useRecoilValue } from 'recoil';
import { userInfo } from '../../../atoms';
import { getDownloadURL, getStorage, listAll, ref } from 'firebase/storage';
import { getApp } from 'firebase/app';

const MyProfile = () => {
  const user = useRecoilValue(userInfo);
  const userInfos = user.userInfomation;

  const [open, setOpen] = useRecoilState(editModal);
  const handleOpen = () => setOpen(true);
  const [currentUser, setCurrentUser] = useState<any>('');

  const [nickname, setNickname] = useState<any>(currentUser.displayName); // 닉네임
  const imgProfileUrl = useRecoilValue(profileState);
  const [imgUploadUrl, setImgUploadUrl] = useState<any>(); // 업로드한 이미지 url
  const [img, setImg] = useState<any>([]);
  const userURL = useRecoilValue(userUrl);

  const imageRef = ref(storage);
  useEffect(() => {
    listAll(imageRef).then((response) => {
      response.items.forEach((item) => {
        getDownloadURL(item).then((url) => {
          setImg((prev: any) => [...prev, url]);
        });
      });
    });
  }, []);
  console.log('img', img);

  // 현재 로그인한 사용자 가져오기
  useEffect(() => {
    auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(auth.currentUser);
        setImgUploadUrl(user.photoURL);
      } else {
        return console.log('로그인 안됨');
      }
    });
  }, [auth.currentUser]);

  return (
    <S.MyPageAll>
      <S.MyPageContainer>
        <S.MyProfileBox>
          <S.ProfileImgLabelInputWrapper>
            <S.ProfileImgShow src={img[0]} onClick={handleOpen} />
          </S.ProfileImgLabelInputWrapper>
          <S.MyProfileNickname>{currentUser.displayName}</S.MyProfileNickname>
          <S.NicknameInputWrapper>
            <S.NicknameText>닉네임</S.NicknameText>
            <S.NicknameInput
              type="text"
              placeholder={currentUser.displayName}
              value={nickname}
            />
          </S.NicknameInputWrapper>
          <S.EmailInputWrpper>
            <S.EmailText>이메일</S.EmailText>
            <S.EmailInputDiv>{userInfos.email}</S.EmailInputDiv>
          </S.EmailInputWrpper>
          <S.PhoneNumInputWrpper>
            <S.PhoneNumText>휴대전화</S.PhoneNumText>
            <S.PhoneNumInputDiv>{userInfos.phoneNumber}</S.PhoneNumInputDiv>
          </S.PhoneNumInputWrpper>
          <S.GenderInputWrpper>
            <S.GenderText>성별</S.GenderText>
            <S.GenderInputDiv>{userInfos.gender}</S.GenderInputDiv>
          </S.GenderInputWrpper>
          <S.AgeInputWrpper>
            <S.AgeText>생일</S.AgeText>
            <S.AgeInputDiv>{userInfos.age}</S.AgeInputDiv>
          </S.AgeInputWrpper>
          <S.ModifyCompleteButton type="button">
            <MyProfileEditModal />
          </S.ModifyCompleteButton>
          <DeleteAccount />
        </S.MyProfileBox>
      </S.MyPageContainer>
      <MyPageTab />
    </S.MyPageAll>
  );
};

export default MyProfile;




import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Modal from '@mui/material/Modal';
import { useEffect, useState } from 'react';
import { auth, storage } from '../../../services/firebase';
import { updateProfile } from 'firebase/auth';
import { getDownloadURL, ref, uploadString } from 'firebase/storage';
import { v4 as uuidv4 } from 'uuid';
import * as S from './style';
import UpdatePassword from '../../Authentication/UpdatePassword/UpdatePassword';
import { useRecoilState, useRecoilValue } from 'recoil';
import { editModal, userUrl } from '../../../atoms';
import { profileState } from '../../../atoms';
import { userInfo } from '../../../atoms';

const MyProfileEditModal = ({ setIsModalOpen }: any) => {
  const user = useRecoilValue(userInfo);
  const userInfos = user.userInfomation;
  console.log('user', user);
  console.log('auth.currentUser', auth.currentUser);

  const [profileUrl, setProfileUrl] = useRecoilState(profileState);

  // 모달 관련
  const [open, setOpen] = useRecoilState(editModal);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  // 닉네임 관련
  const currentUserInfos = auth.currentUser; // 현재 로그인한 사용자의 정보들(파이어베이스)
  const [nickname, setNickname] = useState<any>(currentUserInfos?.displayName); // 현재 닉네임 상태변경
  const [currentUser, setCurrentUser] = useState<any>(''); // 현재 로그인한 사용자 가져오기 및 변경 전 데이터

  // 이미지 관련
  const imgProfileUrl = useRecoilValue(profileState);
  const [imgFile, setImgFile] = useState<any>(imgProfileUrl); // 이미지 파일 엄청 긴 이름
  const [imgFileName, setImgFileName] = useState<any>(''); // 이미지 파일 이름.jpg
  const [imgUploadUrl, setImgUploadUrl] = useRecoilState<any>(userUrl); // 변경된 이미지 url
  console.log('imgUploadUrl', imgUploadUrl);

  // 현재 로그인한 사용자 가져오기
  useEffect(() => {
    auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(currentUserInfos);
      } else {
        return console.log('로그인 안됨');
      }
    });
  }, [currentUser]);

  // 변경할 닉네임 받아오는 함수
  // 변경눌렀을 때 마이페이지 업뎃되면 닉네임은 끝난거
  const ToChangeNicknameInput = (event: any) => {
    setNickname(event.target.value);
  };

  // 수정완료 버튼 누를 때 유효성 검사 확인만
  const nicknameChangeOnClick = async (e: any) => {
    if (nickname.length < 2 || nickname.length > 5) {
      alert('2글자 이상 5글자 이하로 입력해주세요.');
      return;
    } else if (imgFile.length === 0) {
      setImgUploadUrl(
        'https://firebasestorage.googleapis.com/v0/b/popcorn1-4b47e.appspot.com/o/basic_profile.png?alt=media&token=d58d0f49-79bd-400a-a4ae-ceca444734ae',
      );
    } else if (imgFile.length !== 0) {
      const imgRef = ref(storage, `profileUploadImg/${uuidv4()}`);
      const response = await uploadString(imgRef, imgFile, 'data_url');
      const downloadImageUrl = await getDownloadURL(response.ref);
      setImgUploadUrl(downloadImageUrl);
      setProfileUrl(downloadImageUrl);
    }

    await updateProfile(currentUser, {
      displayName: nickname,
      photoURL: imgUploadUrl,
    })
      .then(() => {
        setNickname(nickname);
        alert('프로필 수정 완료!');
        setOpen(false);
      })
      .catch((error: any) => {
        error;
      });
  };

  // 모달키면 이미지가 보이는데 유저가 클릭하면 업데이트
  const saveNewProfileImg = (event: any) => {
    const target = event.currentTarget;
    const theFile = (target.files as FileList)[0]; // 이미지 인풋창에서 클릭하면 이미지
    setImgFile(theFile.name);
    const reader = new FileReader();
    reader.readAsDataURL(theFile);
    reader.onloadend = (finishedEvent: any) => {
      setImgFile(finishedEvent.currentTarget.result);
    };
  };

  return (
    <div>
      <Button
        onClick={handleOpen}
        style={{
          width: '33%;',
          height: '40px',
        }}
      >
        <S.EditModalBtnText>회원정보수정</S.EditModalBtnText>
      </Button>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <S.EditModalAll>
          <Box sx={style}>
            <S.EditModalTitleText>회원정보 수정</S.EditModalTitleText>
            <S.EditModalImgLabelInputWrapper>
              <S.EditModalProfileImgLabel htmlFor="modalProfileUploadImg">
                {imgFile && <S.EditModalProfileImgShow src={imgFile} />}
              </S.EditModalProfileImgLabel>
              <S.EditModalProfileImgInput
                type="file"
                accept="image/*"
                id="modalProfileUploadImg"
                onChange={saveNewProfileImg}
                style={{ display: 'none' }}
              />
            </S.EditModalImgLabelInputWrapper>
            <S.EditModalNicknameInputWrapper>
              <S.EditModalNicknameText>닉네임</S.EditModalNicknameText>
              <S.EditModalNicknameInput
                type="text"
                placeholder={'닉네임을 입력해주세요'}
                onChange={ToChangeNicknameInput}
                value={nickname}
              />
            </S.EditModalNicknameInputWrapper>
            <S.EditModalEmailInputWrpper>
              <S.EditModalEmailText>이메일(아이디)</S.EditModalEmailText>
              <S.EditModalEmailInput
                placeholder={currentUser?.email}
                readOnly
              />
            </S.EditModalEmailInputWrpper>
            <UpdatePassword />
            <S.EditModalBtnWrapper>
              <S.EditModalCanceleButton onClick={handleClose}>
                취소
              </S.EditModalCanceleButton>

              <S.EditModalCompleteButton
                onClick={nicknameChangeOnClick}
                type="submit"
              >
                수정완료
              </S.EditModalCompleteButton>
            </S.EditModalBtnWrapper>
          </Box>
        </S.EditModalAll>
      </Modal>
    </div>
  );
};
export default MyProfileEditModal;

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '30%',
  height: '800px',
  bgcolor: 'background.paper',
  border: '2px solid transparent',
  boxShadow: 24,
  p: 4,
};


===================닉네임 유지도 되고, 닉네임, 이미지 수정 둘다 잘 되는데 이미지를 수정을 해야 닉네임도 수정이 되는 에러? 닉네임만 수정이 되게 하려면?


import { useEffect, useState } from 'react';
import { auth, storage } from '../../../services/firebase';
import * as S from './style';
import MyPageTab from '../MyPageTab/MyPageTab';
import DeleteAccount from '../../Authentication/DeleteAccount/DeleteAccount';
import MyProfileEditModal from './MyProfileEditModal';
import { useRecoilState } from 'recoil';
import { editModal, profileState } from '../../../atoms';
import { useRecoilValue } from 'recoil';
import { userInfo } from '../../../atoms';
import basicProfileImg from '../../../assets/Img/basicProfileImg.png';
type CurrentUserProfile = any;
const MyProfile = () => {
  const user = useRecoilValue(userInfo);
  const userInfos = user.userInfomation;
  const currentUserProfile: CurrentUserProfile = auth.currentUser;
  const [open, setOpen] = useRecoilState(editModal);
  const handleOpen = () => setOpen(true);
  const [currentUser, setCurrentUser] = useState<any>('');
  const [nickname, setNickname] = useState<any>(currentUser.displayName); // 닉네임
  const [imgUploadUrl, setImgUploadUrl] = useState<any>(); // 업로드한 이미지 url
  const [imgProfileUrl, setImgProfileUrl] = useRecoilState(profileState);
  const currentUserInfos: any = auth.currentUser;

  // 현재 로그인한 사용자 가져오기
  useEffect(() => {
    auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(auth.currentUser);
        setImgUploadUrl(user.photoURL);
      } else {
        return console.log('로그인 안됨');
      }
    });
  }, [auth.currentUser]);

  // 바뀔 때마다 실행해달라
  useEffect(() => {
    if (currentUserInfos?.photoURL !== undefined) {
      console.log(
        'currentUserInfos?.photoURLㅇㅁㄴㅇㅎㅁㅇㄴㅁㄻㄻㄹㅇㄴ',
        currentUserInfos?.photoURL,
      );
      setImgProfileUrl(currentUserInfos?.photoURL);
    }
  }, [currentUserInfos?.photoURL]);

  return (
    <S.MyPageAll>
      <S.MyPageContainer>
        <S.MyProfileBox>
          <S.ProfileImgLabelInputWrapper>
            <S.ProfileImgShow
              src={
                currentUserProfile?.photoURL
                  ? currentUserProfile?.photoURL
                  : basicProfileImg
              }
              onClick={handleOpen}
            />
          </S.ProfileImgLabelInputWrapper>
          <S.MyProfileNickname>{currentUser.displayName}</S.MyProfileNickname>
          <S.NicknameInputWrapper>
            <S.NicknameText>닉네임</S.NicknameText>
            <S.NicknameInput
              type="text"
              placeholder={currentUser.displayName}
              value={nickname}
            />
          </S.NicknameInputWrapper>
          <S.EmailInputWrpper>
            <S.EmailText>이메일</S.EmailText>
            <S.EmailInputDiv>{userInfos.email}</S.EmailInputDiv>
          </S.EmailInputWrpper>
          <S.PhoneNumInputWrpper>
            <S.PhoneNumText>휴대전화</S.PhoneNumText>
            <S.PhoneNumInputDiv>{userInfos.phoneNumber}</S.PhoneNumInputDiv>
          </S.PhoneNumInputWrpper>
          <S.GenderInputWrpper>
            <S.GenderText>성별</S.GenderText>
            <S.GenderInputDiv>{userInfos.gender}</S.GenderInputDiv>
          </S.GenderInputWrpper>
          <S.AgeInputWrpper>
            <S.AgeText>생일</S.AgeText>
            <S.AgeInputDiv>{userInfos.age}</S.AgeInputDiv>
          </S.AgeInputWrpper>
          <S.ModifyCompleteButton type="button">
            <MyProfileEditModal />
          </S.ModifyCompleteButton>
          <DeleteAccount />
        </S.MyProfileBox>
      </S.MyPageContainer>
      <MyPageTab />
    </S.MyPageAll>
  );
};

export default MyProfile;


=============================================================


import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Modal from '@mui/material/Modal';
import { useEffect, useState } from 'react';
import { auth, storage } from '../../../services/firebase';
import { updateProfile } from 'firebase/auth';
import { getDownloadURL, ref, uploadString } from 'firebase/storage';
import { v4 as uuidv4 } from 'uuid';
import * as S from './style';
import UpdatePassword from '../../Authentication/UpdatePassword/UpdatePassword';
import { useRecoilState, useRecoilValue } from 'recoil';
import { editModal, userUrl } from '../../../atoms';
import { profileState } from '../../../atoms';
import { userInfo } from '../../../atoms';
import basicProfileImg from '../../../assets/Img/basicProfileImg.png';

const MyProfileEditModal = () => {
  const user = useRecoilValue(userInfo);
  console.log('user', user);
  console.log('auth.currentUser', auth.currentUser);

  const [profileUrl, setProfileUrl] = useRecoilState(profileState);

  // 모달 관련
  const [open, setOpen] = useRecoilState(editModal);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  // 닉네임 관련
  const currentUserInfos: any = auth.currentUser; // 현재 로그인한 사용자의 정보들(파이어베이스)
  const [nickname, setNickname] = useState<any>(auth.currentUser?.displayName); // 현재 닉네임 상태변경
  const [currentUser, setCurrentUser] = useState<any>(''); // 현재 로그인한 사용자 가져오기 및 변경 전 데이터

  // 이미지 관련 profileState를 바꿔줘야 함 안그러면 로컬스토리지나 세션스토리지, 쿠키 안담겨있음 초기화됨
  // 새로고침했을 때 auth.를쏘스로 담아줘야함
  const [imgProfileUrl, setImgProfileUrl] = useRecoilState(profileState);
  const [imgFile, setImgFile] = useState<any>(imgProfileUrl); // 이미지 파일 엄청 긴 이름
  const [imgUploadUrl, setImgUploadUrl] = useRecoilState<any>(userUrl); // 변경된 이미지 url

  // 현재 로그인한 사용자 가져오기
  useEffect(() => {
    auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(currentUserInfos);
        setNickname(currentUserInfos?.displayName);
      } else {
        return console.log('로그인 안됨');
      }
    });
  }, [currentUser]);

  // 변경할 닉네임 받아오는 함수
  // 변경눌렀을 때 마이페이지 업뎃되면 닉네임은 끝난거
  const ToChangeNicknameInput = (event: any) => {
    setNickname(event.target.value);
  };

  // 수정완료 버튼 누를 때 유효성 검사 확인만
  const nicknameChangeOnClick = async (e: any) => {
    if (nickname.length < 2 || nickname.length > 5) {
      alert('2글자 이상 5글자 이하로 입력해주세요.');
      return;
    } else if (imgFile.length === 0) {
      setImgUploadUrl(
        'https://firebasestorage.googleapis.com/v0/b/popcorn1-4b47e.appspot.com/o/basic_profile.png?alt=media&token=d58d0f49-79bd-400a-a4ae-ceca444734ae',
      );
    } else if (imgFile.length !== 0) {
      const imgRef = ref(storage, `profileUploadImg/${uuidv4()}`);
      const response = await uploadString(imgRef, imgFile, 'data_url');
      const downloadImageUrl = await getDownloadURL(response.ref);
      setImgUploadUrl(downloadImageUrl);
      setProfileUrl(downloadImageUrl);
      setImgProfileUrl(downloadImageUrl);
      await updateProfile(currentUser, {
        displayName: nickname,
        photoURL: downloadImageUrl,
      })
        .then(() => {
          setNickname(nickname);
          alert('프로필 수정 완료!');
          setOpen(false);
        })
        .catch((error: any) => {
          return console.log('error');
        });
    }
  };

  // 모달키면 이미지가 보이는데 유저가 클릭하면 업데이트
  const saveNewProfileImg = (event: any) => {
    const target = event.currentTarget;
    const theFile = (target.files as FileList)[0]; // 이미지 인풋창에서 클릭하면 이미지
    setImgFile(theFile.name);
    const reader = new FileReader();
    reader.readAsDataURL(theFile);
    reader.onloadend = (finishedEvent: any) => {
      setImgFile(finishedEvent.currentTarget.result);
      setImgProfileUrl(finishedEvent.currentTarget.result);
    };
  };

  return (
    <div>
      <Button
        onClick={handleOpen}
        style={{
          width: '33%;',
          height: '40px',
        }}
      >
        <S.EditModalBtnText>회원정보수정</S.EditModalBtnText>
      </Button>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <S.EditModalAll>
          <Box sx={style}>
            <S.EditModalTitleText>회원정보 수정</S.EditModalTitleText>
            <S.EditModalImgLabelInputWrapper>
              <S.EditModalProfileImgLabel htmlFor="modalProfileUploadImg">
                {imgProfileUrl && (
                  <S.EditModalProfileImgShow
                    src={imgProfileUrl ? imgProfileUrl : basicProfileImg}
                  />
                )}
                <S.EditModalProfileImgInput
                  type="file"
                  accept="image/*"
                  id="modalProfileUploadImg"
                  onChange={saveNewProfileImg}
                  style={{ display: 'none' }}
                />
              </S.EditModalProfileImgLabel>
            </S.EditModalImgLabelInputWrapper>
            <S.EditModalNicknameInputWrapper>
              <S.EditModalNicknameText>닉네임</S.EditModalNicknameText>
              <S.EditModalNicknameInput
                type="text"
                placeholder={'닉네임을 입력해주세요'}
                onChange={ToChangeNicknameInput}
                value={nickname}
              />
            </S.EditModalNicknameInputWrapper>
            <S.EditModalEmailInputWrpper>
              <S.EditModalEmailText>이메일(아이디)</S.EditModalEmailText>
              <S.EditModalEmailInput
                placeholder={currentUser?.email}
                readOnly
              />
            </S.EditModalEmailInputWrpper>
            <UpdatePassword />
            <S.EditModalBtnWrapper>
              <S.EditModalCanceleButton onClick={handleClose}>
                취소
              </S.EditModalCanceleButton>

              <S.EditModalCompleteButton
                onClick={nicknameChangeOnClick}
                type="submit"
              >
                수정완료
              </S.EditModalCompleteButton>
            </S.EditModalBtnWrapper>
          </Box>
        </S.EditModalAll>
      </Modal>
    </div>
  );
};
export default MyProfileEditModal;

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '30%',
  height: '800px',
  bgcolor: 'background.paper',
  border: '2px solid transparent',
  boxShadow: 24,
  p: 4,
};



=============================닉네임만 수정, 이미지만 수정, 둘다 가능하고 새로고침해도 유지되는 잘되는 코드 ! 

import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Modal from '@mui/material/Modal';
import { useEffect, useState } from 'react';
import { auth, storage } from '../../../services/firebase';
import { updateProfile } from 'firebase/auth';
import { getDownloadURL, ref, uploadString } from 'firebase/storage';
import { v4 as uuidv4 } from 'uuid';
import * as S from './style';
import UpdatePassword from '../../Authentication/UpdatePassword/UpdatePassword';
import { useRecoilState, useRecoilValue } from 'recoil';
import { editModal, userUrl } from '../../../atoms';
import { profileState } from '../../../atoms';
import { userInfo } from '../../../atoms';
import basicProfileImg from '../../../assets/Img/basicProfileImg.png';

const MyProfileEditModal = () => {
  const user = useRecoilValue(userInfo);
  const [profileUrl, setProfileUrl] = useRecoilState(profileState);

  // 모달 관련
  const [open, setOpen] = useRecoilState(editModal);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  // 닉네임 관련
  const currentUserInfos: any = auth.currentUser; // 현재 로그인한 사용자의 정보들(파이어베이스)
  const [nickname, setNickname] = useState<any>(auth.currentUser?.displayName); // 현재 닉네임 상태변경
  const [currentUser, setCurrentUser] = useState<any>(''); // 현재 로그인한 사용자 가져오기 및 변경 전 데이터

  // 이미지 관련 profileState를 바꿔줘야 함 안그러면 로컬스토리지나 세션스토리지, 쿠키 안담겨있음 초기화됨
  // 새로고침했을 때 auth.를쏘스로 담아줘야함
  const [imgProfileUrl, setImgProfileUrl] = useRecoilState(profileState);
  const [imgFile, setImgFile] = useState<any>(imgProfileUrl); // 이미지 파일 엄청 긴 이름
  const [imgUploadUrl, setImgUploadUrl] = useRecoilState<any>(userUrl); // 변경된 이미지 url

  // 현재 로그인한 사용자 가져오기
  useEffect(() => {
    auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(currentUserInfos);
        setNickname(currentUserInfos?.displayName);
      } else {
        return console.log('로그인 안됨');
      }
    });
  }, [currentUser]);

  // 변경할 닉네임 받아오는 함수
  // 변경눌렀을 때 마이페이지 업뎃되면 닉네임은 끝난거
  const ToChangeNicknameInput = (event: any) => {
    setNickname(event.target.value);
  };

  // 수정완료 버튼 누를 때 유효성 검사 확인만
  const nicknameChangeOnClick = async (e: any) => {
    if (nickname.length < 2 || nickname.length > 5) {
      alert('2글자 이상 5글자 이하로 입력해주세요.');
      return;
    } else if (imgFile.length !== 0) {
      const imgRef = ref(storage, `profileUploadImg/${uuidv4()}`);
      const response = await uploadString(imgRef, imgFile, 'data_url');
      const downloadImageUrl = await getDownloadURL(response.ref);
      setImgUploadUrl(downloadImageUrl);
      setProfileUrl(downloadImageUrl);
      setImgProfileUrl(downloadImageUrl);
      await updateProfile(currentUser, {
        displayName: nickname,
        photoURL: downloadImageUrl,
      })
        .then(() => {
          setNickname(nickname);
          alert('프로필 수정 완료!');
          setOpen(false);
        })
        .catch((error: any) => {
          return console.log('error');
        });
    }
  };

  // 모달키면 이미지가 보이는데 유저가 클릭하면 업데이트
  const saveNewProfileImg = (event: any) => {
    const target = event.currentTarget;
    const theFile = (target.files as FileList)[0]; // 이미지 인풋창에서 클릭하면 이미지
    setImgFile(theFile.name);
    const reader = new FileReader();
    reader.readAsDataURL(theFile);
    reader.onloadend = (finishedEvent: any) => {
      setImgFile(finishedEvent.currentTarget.result);
      setImgProfileUrl(finishedEvent.currentTarget.result);
    };
  };

  return (
    <div>
      <Button
        onClick={handleOpen}
        style={{
          width: '33%;',
          height: '40px',
        }}
      >
        <S.EditModalBtnText>회원정보수정</S.EditModalBtnText>
      </Button>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <S.EditModalAll>
          <Box sx={style}>
            <S.EditModalTitleText>회원정보 수정</S.EditModalTitleText>
            <S.EditModalImgLabelInputWrapper>
              <S.EditModalProfileImgLabel htmlFor="modalProfileUploadImg">
                {imgProfileUrl && (
                  <S.EditModalProfileImgShow
                    src={imgProfileUrl ? imgProfileUrl : basicProfileImg}
                  />
                )}
                <S.EditModalProfileImgInput
                  type="file"
                  accept="image/*"
                  id="modalProfileUploadImg"
                  onChange={saveNewProfileImg}
                  style={{ display: 'none' }}
                />
              </S.EditModalProfileImgLabel>
            </S.EditModalImgLabelInputWrapper>
            <S.EditModalNicknameInputWrapper>
              <S.EditModalNicknameText>닉네임</S.EditModalNicknameText>
              <S.EditModalNicknameInput
                type="text"
                placeholder={'닉네임을 입력해주세요'}
                onChange={ToChangeNicknameInput}
                value={nickname}
              />
            </S.EditModalNicknameInputWrapper>
            <S.EditModalEmailInputWrpper>
              <S.EditModalEmailText>이메일(아이디)</S.EditModalEmailText>
              <S.EditModalEmailInput
                placeholder={currentUser?.email}
                readOnly
              />
            </S.EditModalEmailInputWrpper>
            <UpdatePassword />
            <S.EditModalBtnWrapper>
              <S.EditModalCanceleButton onClick={handleClose}>
                취소
              </S.EditModalCanceleButton>

              <S.EditModalCompleteButton
                onClick={nicknameChangeOnClick}
                type="submit"
              >
                수정완료
              </S.EditModalCompleteButton>
            </S.EditModalBtnWrapper>
          </Box>
        </S.EditModalAll>
      </Modal>
    </div>
  );
};
export default MyProfileEditModal;

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '30%',
  height: '800px',
  bgcolor: 'background.paper',
  border: '2px solid transparent',
  boxShadow: 24,
  p: 4,
};



import { useEffect, useState } from 'react';
import { auth, storage } from '../../../services/firebase';
import * as S from './style';
import MyPageTab from '../MyPageTab/MyPageTab';
import DeleteAccount from '../../Authentication/DeleteAccount/DeleteAccount';
import MyProfileEditModal from './MyProfileEditModal';
import { useRecoilState } from 'recoil';
import { editModal, profileState } from '../../../atoms';
import { useRecoilValue } from 'recoil';
import { userInfo } from '../../../atoms';
import basicProfileImg from '../../../assets/Img/basicProfileImg.png';
type CurrentUserProfile = any;
const MyProfile = () => {
  const user = useRecoilValue(userInfo);
  const userInfos = user.userInfomation;
  const currentUserProfile: CurrentUserProfile = auth.currentUser;
  const [open, setOpen] = useRecoilState(editModal);
  const handleOpen = () => setOpen(true);
  const [currentUser, setCurrentUser] = useState<any>('');
  const [nickname, setNickname] = useState<any>(currentUser.displayName); // 닉네임
  const [imgUploadUrl, setImgUploadUrl] = useState<any>(); // 업로드한 이미지 url
  const [imgProfileUrl, setImgProfileUrl] = useRecoilState(profileState);
  const currentUserInfos: any = auth.currentUser;

  // 현재 로그인한 사용자 가져오기
  useEffect(() => {
    auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(auth.currentUser);
        setImgUploadUrl(user.photoURL);
      } else {
        return console.log('로그인 안됨');
      }
    });
  }, [auth.currentUser]);

  // 바뀔 때마다 실행해달라
  useEffect(() => {
    if (currentUserInfos?.photoURL !== undefined) {
      setImgProfileUrl(currentUserInfos?.photoURL);
    }
  }, [currentUserInfos?.photoURL]);

  return (
    <S.MyPageAll>
      <S.MyPageContainer>
        <S.MyProfileBox>
          <S.ProfileImgLabelInputWrapper>
            <S.ProfileImgShow
              src={
                currentUserProfile?.photoURL
                  ? currentUserProfile?.photoURL
                  : basicProfileImg
              }
              onClick={handleOpen}
            />
          </S.ProfileImgLabelInputWrapper>
          <S.MyProfileNickname>{currentUser.displayName}</S.MyProfileNickname>
          <S.NicknameInputWrapper>
            <S.NicknameText>닉네임</S.NicknameText>
            <S.NicknameInput
              type="text"
              placeholder={currentUser.displayName}
              value={nickname}
            />
          </S.NicknameInputWrapper>
          <S.EmailInputWrpper>
            <S.EmailText>이메일</S.EmailText>
            <S.EmailInputDiv>{userInfos.email}</S.EmailInputDiv>
          </S.EmailInputWrpper>
          <S.PhoneNumInputWrpper>
            <S.PhoneNumText>휴대전화</S.PhoneNumText>
            <S.PhoneNumInputDiv>{userInfos.phoneNumber}</S.PhoneNumInputDiv>
          </S.PhoneNumInputWrpper>
          <S.GenderInputWrpper>
            <S.GenderText>성별</S.GenderText>
            <S.GenderInputDiv>{userInfos.gender}</S.GenderInputDiv>
          </S.GenderInputWrpper>
          <S.AgeInputWrpper>
            <S.AgeText>생일</S.AgeText>
            <S.AgeInputDiv>{userInfos.age}</S.AgeInputDiv>
          </S.AgeInputWrpper>
          <S.ModifyCompleteButton type="button">
            <MyProfileEditModal />
          </S.ModifyCompleteButton>
          <DeleteAccount />
        </S.MyProfileBox>
      </S.MyPageContainer>
      <MyPageTab />
    </S.MyPageAll>
  );
};

export default MyProfile;


==============================================파이어베이스에선 로그인이 안되어있다고 인식..

import * as S from './style';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Modal from '@mui/material/Modal';
import { useEffect, useState } from 'react';
import { auth, storage } from '../../../services/firebase';
import { updateProfile } from 'firebase/auth';
import { getDownloadURL, ref, uploadString } from 'firebase/storage';
import { v4 as uuidv4 } from 'uuid';
import UpdatePassword from '../../Authentication/UpdatePassword/UpdatePassword';
import { useRecoilState, useRecoilValue } from 'recoil';
import {
  editModal,
  kakaoAccessToken,
  userInfoState,
  userUrl,
} from '../../../atoms';
import { profileState } from '../../../atoms';
import { userInfo } from '../../../atoms';
import basicProfileImg from '../../../assets/Img/basicProfileImg.svg';
import styled from 'styled-components';

const MyProfileEditModal = () => {
  const user = useRecoilValue(userInfo);
  const [profileUrl, setProfileUrl] = useRecoilState(profileState);

  // 모달 관련
  const [open, setOpen] = useRecoilState(editModal);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  // 닉네임 관련
  const currentUserInfos: any = auth.currentUser; // 현재 로그인한 사용자의 정보들(파이어베이스)
  const [nickname, setNickname] = useState<any>(auth.currentUser?.displayName); // 현재 닉네임 상태변경
  const [currentUser, setCurrentUser] = useState<any>(''); // 현재 로그인한 사용자 가져오기

  // 이미지 관련
  const [imgProfileUrl, setImgProfileUrl] = useRecoilState(profileState);
  const [imgFile, setImgFile] = useState<any>(imgProfileUrl); // 이미지 파일 엄청 긴 이름
  const [imgUploadUrl, setImgUploadUrl] = useRecoilState<any>(userUrl); // 변경된 이미지 url

  // 카카오 정보 수정 관련 - accessToken이 있다면 kakaoUserInfo정보를 바꿔줘라
  const accessToken = useRecoilValue(kakaoAccessToken);
  const [kakaoUserInfo, setKakaoUserInfo] = useRecoilState(userInfoState);

  console.log('accessToken', accessToken);
  console.log('kakaoUserInfo', kakaoUserInfo);
  console.log('kakaoUserInfo.nickName', kakaoUserInfo.nickName);
  console.log('user', user);
  console.log(
    'user.userInfomation.displayName',
    user.userInfomation.displayName,
  );
  console.log('nickname', nickname);
  // 현재 로그인한 사용자 가져오기
  useEffect(() => {
    auth.onAuthStateChanged((user) => {
      if (user) {
        setCurrentUser(currentUserInfos);
        setNickname(currentUserInfos?.displayName);
      } else {
        return console.log('로그인 안됨');
      }
    });
  }, [currentUser]);

  // 변경할 닉네임 받아오는 함수
  // 변경눌렀을 때 마이페이지 업뎃되면 닉네임은 끝난거
  const ToChangeNicknameInput = (event: any) => {
    setNickname(event.target.value);
  };

  // 수정완료 버튼 누를 때 유효성 검사 확인만
  const nicknameChangeOnClick = async (e: any) => {
    if (nickname.length < 2 || nickname.length > 5) {
      alert('2글자 이상 5글자 이하로 입력해주세요.');
      return;
    }
    // if (accessToken) {
    //   setNickname(kakaoUserInfo.nickName);
    // }
    if (imgFile.length === 0) {
      try {
        await updateProfile(currentUser, {
          displayName: nickname,
        });
        setNickname(nickname);
        alert('프로필 수정 완료!');
        setOpen(false);
      } catch (error) {
        console.log(error);
      }
    } else {
      try {
        const imgRef = ref(storage, `profileUploadImg/${uuidv4()}`);
        // Storage에 이미지 업로드
        const response = await uploadString(imgRef, imgFile, 'data_url');
        // 업로드한 이미지의 url 가져오기
        const downloadImageUrl = await getDownloadURL(response.ref);
        await updateProfile(currentUser, {
          displayName: nickname,
          photoURL: downloadImageUrl,
        });
        setNickname(nickname);
        setImgUploadUrl(downloadImageUrl);
        setProfileUrl(downloadImageUrl);
        setImgProfileUrl(downloadImageUrl);
        alert('프로필 수정 완료!');
        setOpen(false);
      } catch (error) {
        console.log(error);
      }
    }
  };

  // 이미지 업로드 시 이미지 미리보기 바로 반영됨
  const saveNewProfileImg = (event: any) => {
    const target = event.currentTarget;
    const theFile = (target.files as FileList)[0]; // 이미지 인풋창에서 클릭하면 이미지
    setImgFile(theFile.name);
    const reader = new FileReader();
    reader.readAsDataURL(theFile);
    reader.onloadend = (finishedEvent: any) => {
      setImgFile(finishedEvent.currentTarget.result);
      setImgProfileUrl(finishedEvent.currentTarget.result);
    };
  };

  return (
    <>
      <S.EditModalBtnText onClick={handleOpen}>회원정보수정</S.EditModalBtnText>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <S.EditModalAll>
          <BoxContainer>
            <S.EditModalTitle>회원정보 수정</S.EditModalTitle>
            <S.EditModalImgLabelInputWrapper>
              <S.EditModalProfileImgLabel htmlFor="modalProfileUploadImg">
                {imgProfileUrl && (
                  <S.EditModalProfileImgShow
                    src={imgProfileUrl ? imgProfileUrl : basicProfileImg}
                  />
                )}
                <S.EditModalProfileImgInput
                  type="file"
                  accept="image/*"
                  id="modalProfileUploadImg"
                  onChange={saveNewProfileImg}
                  style={{ display: 'none' }}
                />
              </S.EditModalProfileImgLabel>
            </S.EditModalImgLabelInputWrapper>
            <S.EditModalNicknameInputWrapper>
              <S.EditModalText>닉네임</S.EditModalText>
              <S.EditModalInput
                type="text"
                placeholder={'닉네임을 입력해주세요'}
                onChange={ToChangeNicknameInput}
                value={nickname}
              />
            </S.EditModalNicknameInputWrapper>
            <S.EditModalEmailInputWrpper>
              <S.EditModalText>이메일(아이디)</S.EditModalText>
              <S.EditModalInput
                placeholder={
                  currentUser?.email ? currentUser?.email : kakaoUserInfo.email
                }
                readOnly
              />
            </S.EditModalEmailInputWrpper>
            <S.EnterInputPasswordWrapper>
              <UpdatePassword />
            </S.EnterInputPasswordWrapper>

            <S.EditModalBtnWrapper>
              <S.EditModalCanceleButton onClick={handleClose}>
                취소
              </S.EditModalCanceleButton>
              <S.EditModalCompleteButton
                onClick={nicknameChangeOnClick}
                type="submit"
              >
                수정
              </S.EditModalCompleteButton>
            </S.EditModalBtnWrapper>
          </BoxContainer>
        </S.EditModalAll>
      </Modal>
    </>
  );
};
export default MyProfileEditModal;

export const BoxContainer = styled(Box)`
  position: absolute;
  width: 400px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border-radius: 5px;
  background-color: #f5f5f5;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding-top: 20px;
  height: 710px;
  overflow: scroll;
  padding-bottom: 20px;
  @media screen and (max-width: 750px) {
    height: 600px;
    top: 40%;
  }
`;
