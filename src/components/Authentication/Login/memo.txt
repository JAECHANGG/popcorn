import { Button } from '@mui/material';
import axios from 'axios';
import QueryString from 'qs';
import { useState, useEffect } from 'react';
const KakaoLogin = () => {
  const REST_API_KEY = 'e1cca4f9a606cd8747df8e76c8afc4b3';
  const REDIRECT_URI = 'http://localhost:3000/kakaoLogin';
  // 인가코드 요청
  const KAKAO_AUTH_URL = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`;
  const CLIENT_SECRET = 'FBQo8ktx7aatO2HhGIUVV9WkyeZ0Wgte';
  const KAKAO_CODE = location.search.split('=')[1];
  //nickname state
  const [nickName, setNickName] = useState();
  const [accessToken, setAccessToken] = useState();
  // 카카오 로그인 버튼 누르면 카카오 로그인 진행
  const KakaoLoginHandler = () => {
    window.location.href = KAKAO_AUTH_URL;
  };
  //현재 윈도우 창의 주소값, url의 파라미터를 가져오고 params에 저장된 파라미터 안에서 'code'의 값을 가져옴
  const code = new URL(window.location.href).searchParams.get('code');

  // AccessToken 요청
  const getAccessToken = async () => {
    const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
      },
      body: QueryString.stringify({
        //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
        grant_type: 'authorization_code',
        client_id: REST_API_KEY,
        redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
        code: KAKAO_CODE,
        client_secret: CLIENT_SECRET,
      }),
    })
      .then((res) => res.json())
      .catch((error) => console.error(error));
    //state에 accessToken을 넣어주자
    setAccessToken(ACCESS_TOKEN.access_token);
    //localStorage에 잘들어가는지 확인해보자
    localStorage.setItem('token_for_kakaotalk', ACCESS_TOKEN.access_token);

    //kakao user DATA를 get해오자
    const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
      headers: {
        //access_token이 필요하다
        Authorization: `Bearer ${ACCESS_TOKEN.access_token}`,
      },
    });
    setNickName(user.data.properties.nickname);
  };
  useEffect(() => {
    getAccessToken();
  }, []);

  return <Button onClick={KakaoLoginHandler}>카카오로 계속하기</Button>;
};

export default KakaoLogin;


===========================================왜 카카오 로그인 화면이 안보이는거냐!!!!!!!!!!!!!!!!!

import { Button } from '@mui/material';
import axios from 'axios';
import QueryString from 'qs';
import { useNavigate } from 'react-router-dom';

const KakaoLogin = () => {
  const REST_API_KEY = 'e1cca4f9a606cd8747df8e76c8afc4b3';
  const REDIRECT_URI = 'http://localhost:3000/kakaoLogin';
  // 인가코드 요청
  const KAKAO_AUTH_URL = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`;
  const CLIENT_SECRET = 'FBQo8ktx7aatO2HhGIUVV9WkyeZ0Wgte';
  const KAKAO_CODE = location.search.split('=')[1];
  const navigate = useNavigate(); // useNavigate hook 사용

  // 카카오 로그인 버튼 누르면 카카오 로그인 진행
  const KakaoLoginHandler = () => {
    window.location.href = KAKAO_AUTH_URL;
  };

  //현재 윈도우 창의 주소값, url의 파라미터를 가져오고 params에 저장된 파라미터 안에서 'code'의 값을 가져옴
  const code = new URL(window.location.href).searchParams.get('code');

  // AccessToken 요청
  const getAccessToken = async () => {
    const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
      },
      body: QueryString.stringify({
        //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
        grant_type: 'authorization_code',
        client_id: REST_API_KEY,
        redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
        code: KAKAO_CODE,
        client_secret: CLIENT_SECRET,
      }),
    })
      .then((res) => res.json())
      .catch((error) => console.error(error));
  };

  // location.search에 'code' 값이 있을 경우, getAccessToken 함수를 호출하고 '/kakaoLogin' 경로로 이동함
  if (code) {
    getAccessToken();
    navigate('/kakaoLogin');
  }

  return <Button onClick={KakaoLoginHandler}>카카오로 계속하기</Button>;
};

export default KakaoLogin;


============================여기까지도 나름 잘됨!

import { Button } from '@mui/material';
import axios from 'axios';
import QueryString from 'qs';
import { useNavigate } from 'react-router-dom';
import { useEffect } from 'react';

const KakaoLogin = () => {
  const REST_API_KEY = 'fbbe0ffd8e5a9275920fc4b89603b870';
  const REDIRECT_URI = 'http://localhost:3000';
  // 인가코드 요청
  const KAKAO_AUTH_URL = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`;
  const CLIENT_SECRET = 'Tdn2Y3Xx4qXX8mBO2tYbe44g3xwaOj23';
  const navigate = useNavigate(); // useNavigate hook 사용

  // 카카오 로그인 버튼 누르면 카카오 로그인 진행
  const KakaoLoginHandler = () => {
    window.location.href = KAKAO_AUTH_URL;
  };

  //현재 윈도우 창의 주소값, url의 파라미터를 가져오고 params에 저장된 파라미터 안에서 'code'의 값을 가져옴

  // AccessToken 요청
  const getAccessToken = async () => {
    const code = new URL(window.location.href).searchParams.get('code');
    const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
      },
      body: QueryString.stringify({
        //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
        grant_type: 'authorization_code',
        client_id: REST_API_KEY,
        redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
        code: code,
        client_secret: CLIENT_SECRET,
      }),
    })
      .then((res) => res.json())
      .catch((error) => console.error(error));
    console.log('ACCESS_TOKEN1', ACCESS_TOKEN);
    console.log('REST_API_KEY', REST_API_KEY);
  };

  useEffect(() => {
    getAccessToken();
  }, []);

  // location.search에 'code' 값이 있을 경우, getAccessToken 함수를 호출하고 '/kakaoLogin' 경로로 이동함
  //   if (code) {
  //     getAccessToken();
  //     navigate('/kakaoLogin');
  //   }

  return (
    <div>
      <Button onClick={KakaoLoginHandler}>카카오로 계속하기</Button>
      <Button onClick={getAccessToken}>테스트</Button>
    </div>
  );
};

export default KakaoLogin;


=========================================잘되는데 모르겠음 ..

import { Button } from '@mui/material';
import axios from 'axios';
import QueryString from 'qs';
import { useNavigate } from 'react-router-dom';
import { useEffect, useState } from 'react';

const KakaoLogin = () => {
  const navigate = useNavigate(); // useNavigate hook 사용
  const REST_API_KEY = 'fbbe0ffd8e5a9275920fc4b89603b870';
  const REDIRECT_URI = 'http://localhost:3000/';
  // 인가코드 요청
  const KAKAO_AUTH_URL = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`;
  const CLIENT_SECRET = 'Tdn2Y3Xx4qXX8mBO2tYbe44g3xwaOj23';
  //accessToken state
  const [accessToken, setAccessToken] = useState();

  // 카카오 로그인 버튼 누르면 카카오 로그인 진행
  const KakaoLoginHandler = () => {
    window.location.href = KAKAO_AUTH_URL;
  };

  // AccessToken 요청
  const getAccessToken = async () => {
    //현재 윈도우 창의 주소값, url의 파라미터를 가져오고 params에 저장된 파라미터 안에서 'code'의 값을 가져옴
    const code = new URL(window.location.href).searchParams.get('code');
    const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
      },
      body: QueryString.stringify({
        //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
        grant_type: 'authorization_code',
        client_id: REST_API_KEY,
        redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
        code: code,
        client_secret: CLIENT_SECRET,
      }),
    })
      .then((res) => res.json())
      .catch((error) => console.error(error));
    console.log('ACCESS_TOKEN1', ACCESS_TOKEN);
    console.log('REST_API_KEY', REST_API_KEY);
    //state에 accessToken을 넣어주자
    setAccessToken(ACCESS_TOKEN.access_token);
    localStorage.setItem('token_for_kakaotalk', ACCESS_TOKEN.access_token);

    //kakao user DATA를 get해오자
    const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
      headers: {
        //access_token이 필요하다
        Authorization: `Bearer ${ACCESS_TOKEN.access_token}`,
      },
    });
    console.log('user', user);
  };

  useEffect(() => {
    getAccessToken();
  }, []);

  return (
    <div>
      <Button onClick={KakaoLoginHandler}>카카오로 계속하기</Button>
      <Button onClick={getAccessToken}>테스트</Button>
    </div>
  );
};

export default KakaoLogin;


===============================================

import { Button } from '@mui/material';
import axios from 'axios';
import QueryString from 'qs';
import { useNavigate } from 'react-router-dom';
import { useEffect, useState } from 'react';

// 카카오 로그인 기능 구현 코드
const KakaoLogin = () => {
  const navigate = useNavigate(); // useNavigate hook 사용
  const REST_API_KEY = 'fbbe0ffd8e5a9275920fc4b89603b870'; // 카카오 디벨로퍼스에서 발급받은 REST API키
  const REDIRECT_URI = 'http://localhost:3000/'; // 카카오 로그인 후 리다이렉트될 URI
  const link = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`; // 인가코드 요청 URL
  const CLIENT_SECRET = 'Tdn2Y3Xx4qXX8mBO2tYbe44g3xwaOj23'; // 카카오 디벨로퍼스에서 발급받은 client secret 키
  const [accessToken, setAccessToken] = useState(); // accessToken은 카카오 로그인을 통해 발급받은 액세스 토큰을 저장하기 위한 상태 변수
  // const [code, setCode] = useState(''); // code는 카카오 로그인 요청 후 받아온 인가 코드를 저장하기 위한 상태 변수
  const [nickname, setNickname] = useState();
  // 카카오 로그인 버튼 누르면 카카오 로그인 페이지로 이동
  const KakaoLoginHandler = () => {
    window.location.replace(link);
  };
  // 현재 URL에서 파라미터로 전달된 'code'값을 추출하고
  const code = new URL(window.location.href).searchParams.get('code');
  console.log(code);

  // AccessToken 요청
  const getAccessToken = async () => {
    const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
      },
      body: QueryString.stringify({
        // QueryString.stringify 함수를 사용해서 요청에 필요한 파라미터 설정
        //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
        grant_type: 'authorization_code',
        client_id: REST_API_KEY,
        redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
        code: code,
        client_secret: CLIENT_SECRET,
      }),
    })
      .then((res) => res.json())
      .catch((error) => console.error(error));
    setAccessToken(ACCESS_TOKEN.access_token); // ACCESS_TOKEN 상태 변수에 엑세스 토큰을 저장
    console.log('ACCESS_TOKEN', ACCESS_TOKEN);

    // 카카오 API에서 사용자 정보 가져오기
    const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
      headers: {
        //access_token이 필요하다
        Authorization: `Bearer ${ACCESS_TOKEN.access_token}`, // Authorization 헤더에 엑세스 토큰을 포함하여 요청
      },
    });

    // 카카오 로그인 하면 카카오에서 닉네임 받아와서 그 닉네임 서버에 저장하고 로그인하기
    // 재창님 회원가입시 닉네임 서버에 올려주는 코드 가져오기
    console.log('user', user);
    console.log('user.data', user.data);
    localStorage.setItem('token_for_kakaotalk', ACCESS_TOKEN.access_token); // 로컬 스토리지에도 엑세스 토큰 저장
  };

  // 컴포넌트가 마운트되면 실행
  // 여기서 가져온 엑세스 토큰은 state와 localStorage에 저장되어 추후에 카카오 API를 호출할 때 사용됨
  useEffect(() => {
    if (code) {
      // 인가 코드가 있으면 상태 변수에 저장
      // setCode(code);
      // getAccessToken 함수를 호출하여 Access Token 가져오기
      getAccessToken();
      // URL에서 인가 코드를 삭제하여 보안성 향상
      window.history.replaceState({}, '', '/');
    }
  }, []);

  return (
    <div>
      <Button onClick={KakaoLoginHandler}>카카오로 계속하기</Button>
    </div>
  );
};

export default KakaoLogin;


=========================================마지막...되는데 code null값 ㅡㅡ
import { Button } from '@mui/material';
import axios from 'axios';
import QueryString from 'qs';
import { useLocation } from 'react-router-dom';
import { useEffect, useState } from 'react';

// 카카오 로그인 기능 구현 코드
const KakaoLogin = () => {
  const location = useLocation(); // useNavigate hook 사용
  const REST_API_KEY = 'fbbe0ffd8e5a9275920fc4b89603b870'; // 카카오 디벨로퍼스에서 발급받은 REST API키
  const REDIRECT_URI = 'http://localhost:3000/'; // 카카오 로그인 후 리다이렉트될 URI
  const link = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`; // 인가코드 요청 URL
  const CLIENT_SECRET = 'Tdn2Y3Xx4qXX8mBO2tYbe44g3xwaOj23'; // 카카오 디벨로퍼스에서 발급받은 client secret 키
  //주소창에 파라미터code를 가져온다 split 메서드를 활용한다
  const KAKAO_CODE = location.search.split('=')[1];
  const [accessToken, setAccessToken] = useState(); // accessToken은 카카오 로그인을 통해 발급받은 액세스 토큰을 저장하기 위한 상태 변수
  // const [code, setCode] = useState(''); // code는 카카오 로그인 요청 후 받아온 인가 코드를 저장하기 위한 상태 변수
  const [nickname, setNickname] = useState();

  // 카카오 로그인 버튼 누르면 카카오 로그인 페이지로 이동
  const KakaoLoginHandler = () => {
    window.location.replace(link);
  };
  console.log('link', link);
  console.log('REST_API_KEY', REST_API_KEY);
  console.log('REDIRECT_URI', REDIRECT_URI);

  // 현재 URL에서 파라미터로 전달된 'code'값을 추출하고
  const code = new URL(window.location.href).searchParams.get('code');
  console.log(code);

  // AccessToken 요청
  const getAccessToken = async () => {
    const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
      },
      body: QueryString.stringify({
        // QueryString.stringify 함수를 사용해서 요청에 필요한 파라미터 설정
        //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
        grant_type: 'authorization_code',
        client_id: REST_API_KEY,
        redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
        code: code,
        client_secret: CLIENT_SECRET,
      }),
    })
      .then((res) => res.json())
      .catch((error) => console.error(error));
    console.log('ACCESS_TOKEN', ACCESS_TOKEN);
    setAccessToken(ACCESS_TOKEN.access_token); // ACCESS_TOKEN 상태 변수에 엑세스 토큰을 저장
    localStorage.setItem('token_for_kakaotalk', ACCESS_TOKEN.access_token); // 로컬 스토리지에도 엑세스 토큰 저장

    // 카카오 API에서 사용자 정보 가져오기
    const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
      headers: {
        //access_token이 필요하다
        Authorization: `Bearer ${ACCESS_TOKEN.access_token}`, // Authorization 헤더에 엑세스 토큰을 포함하여 요청
      },
    });

    // 카카오 로그인 하면 카카오에서 닉네임 받아와서 그 닉네임 서버에 저장하고 로그인하기
    // 재창님 회원가입시 닉네임 서버에 올려주는 코드 가져오기
    console.log('user', user);
    console.log('user.data', user.data);
  };

  // 컴포넌트가 마운트되면 실행
  // 여기서 가져온 엑세스 토큰은 state와 localStorage에 저장되어 추후에 카카오 API를 호출할 때 사용됨
  useEffect(() => {
    getAccessToken();
  }, []);

  return (
    <div>
      <button onClick={KakaoLoginHandler}>카카오로 계속하기</button>
    </div>
  );
};

export default KakaoLogin;


==================================== 이것도 코드 null값....
import { Button } from '@mui/material';
import axios from 'axios';
import QueryString from 'qs';
import { useLocation } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { useRecoilState } from 'recoil';
import { kakaoState } from '../../../atoms';

// 카카오 로그인 기능 구현 코드
const KakaoLogin = () => {
  const location = useLocation(); // useNavigate hook 사용
  const REST_API_KEY = 'fbbe0ffd8e5a9275920fc4b89603b870'; // 카카오 디벨로퍼스에서 발급받은 REST API키
  const REDIRECT_URI = 'http://localhost:3000/oauth/kakao/callback'; // 카카오 로그인 후 리다이렉트될 URI
  const link = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`; // 인가코드 요청 URL
  const CLIENT_SECRET = 'Tdn2Y3Xx4qXX8mBO2tYbe44g3xwaOj23'; // 카카오 디벨로퍼스에서 발급받은 client secret 키
  //주소창에 파라미터code를 가져온다 split 메서드를 활용한다
  const KAKAO_CODE = location.search.split('=')[1];
  const [accessToken, setAccessToken] = useState(); // accessToken은 카카오 로그인을 통해 발급받은 액세스 토큰을 저장하기 위한 상태 변수
  // const [code, setCode] = useState(''); // code는 카카오 로그인 요청 후 받아온 인가 코드를 저장하기 위한 상태 변수
  const [nickname, setNickname] = useState();
  const [kakaoCode, setKakaoCode] = useRecoilState(kakaoState);
  // 카카오 로그인 버튼 누르면 카카오 로그인 페이지로 이동
  const KakaoLoginHandler = () => {
    window.location.replace(link);
  };
  console.log('link', link);
  console.log('REST_API_KEY', REST_API_KEY);
  console.log('REDIRECT_URI', REDIRECT_URI);

  // 현재 URL에서 파라미터로 전달된 'code'값을 추출하고
  const getKakaoCode = () => {
    const code = new URL(window.location.href).searchParams.get('code');
    console.log('new URL(window.location.href)', new URL(window.location.href));
    console.log(
      'new URL(window.location.href).searchParams',
      new URL(window.location.href).searchParams,
    );
    if (code) {
      console.log('code', code);
      setKakaoCode(code);
    }
  };
  console.log(new URL(window.location.href));
  useEffect(() => {
    getKakaoCode();
    console.log('getKakaoCode()', getKakaoCode());
  });

  // AccessToken 요청
  // const getAccessToken = async () => {
  //   const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
  //     method: 'POST',
  //     headers: {
  //       'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
  //     },
  //     body: QueryString.stringify({
  //       // QueryString.stringify 함수를 사용해서 요청에 필요한 파라미터 설정
  //       //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
  //       grant_type: 'authorization_code',
  //       client_id: REST_API_KEY,
  //       redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
  //       code: code,
  //       client_secret: CLIENT_SECRET,
  //     }),
  //   })
  //     .then((res) => res.json())
  //     .catch((error) => console.error(error));
  //   console.log('ACCESS_TOKEN', ACCESS_TOKEN);
  //   setAccessToken(ACCESS_TOKEN.access_token); // ACCESS_TOKEN 상태 변수에 엑세스 토큰을 저장
  //   localStorage.setItem('token_for_kakaotalk', ACCESS_TOKEN.access_token); // 로컬 스토리지에도 엑세스 토큰 저장

  //   // 카카오 API에서 사용자 정보 가져오기
  //   const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
  //     headers: {
  //       //access_token이 필요하다
  //       Authorization: `Bearer ${ACCESS_TOKEN.access_token}`, // Authorization 헤더에 엑세스 토큰을 포함하여 요청
  //     },
  //   });

  //   // 카카오 로그인 하면 카카오에서 닉네임 받아와서 그 닉네임 서버에 저장하고 로그인하기
  //   // 재창님 회원가입시 닉네임 서버에 올려주는 코드 가져오기
  //   console.log('user', user);
  //   console.log('user.data', user.data);
  // };

  // // 컴포넌트가 마운트되면 실행
  // // 여기서 가져온 엑세스 토큰은 state와 localStorage에 저장되어 추후에 카카오 API를 호출할 때 사용됨
  // useEffect(() => {
  //   getAccessToken();
  // }, []);

  return (
    <div>
      <button onClick={KakaoLoginHandler}>카카오로 계속하기</button>
    </div>
  );
};

export default KakaoLogin;


==========================영재님한테 보여줄 코드 

import { useLocation } from 'react-router-dom';
import { useEffect, useState } from 'react';

// 카카오 로그인 기능 구현 코드
const KakaoLogin = () => {
  const location = useLocation(); // useNavigate hook 사용
  const REST_API_KEY = 'fbbe0ffd8e5a9275920fc4b89603b870'; // 카카오 디벨로퍼스에서 발급받은 REST API키
  const REDIRECT_URI = 'http://localhost:3000/oauth/callback/kakao'; // 카카오 로그인 후 리다이렉트될 URI
  const link = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`; // 인가코드 요청 URL
  const CLIENT_SECRET = 'Tdn2Y3Xx4qXX8mBO2tYbe44g3xwaOj23'; // 카카오 디벨로퍼스에서 발급받은 client secret 키
  const [code, setCode] = useState<string | null>(null);
  const KakaoLoginHandler = () => {
    window.location.replace(link);
  };

  // 현재 URL에서 파라미터로 전달된 'code'값을 추출하고
  useEffect(() => {
    const code = new URL(window.location.href).searchParams.get('code');
    setCode(code);
    console.log('code', code);
  }, [location]);

  // AccessToken 요청
  // const getAccessToken = async () => {
  //   const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
  //     method: 'POST',
  //     headers: {
  //       'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
  //     },
  //     body: QueryString.stringify({
  //       // QueryString.stringify 함수를 사용해서 요청에 필요한 파라미터 설정
  //       //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
  //       grant_type: 'authorization_code',
  //       client_id: REST_API_KEY,
  //       redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
  //       code: code,
  //       client_secret: CLIENT_SECRET,
  //     }),
  //   })
  //     .then((res) => res.json())
  //     .catch((error) => console.error(error));
  //   console.log('ACCESS_TOKEN', ACCESS_TOKEN);
  //   setAccessToken(ACCESS_TOKEN.access_token); // ACCESS_TOKEN 상태 변수에 엑세스 토큰을 저장
  //   localStorage.setItem('token_for_kakaotalk', ACCESS_TOKEN.access_token); // 로컬 스토리지에도 엑세스 토큰 저장

  //   // 카카오 API에서 사용자 정보 가져오기
  //   const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
  //     headers: {
  //       //access_token이 필요하다
  //       Authorization: `Bearer ${ACCESS_TOKEN.access_token}`, // Authorization 헤더에 엑세스 토큰을 포함하여 요청
  //     },
  //   });

  //   // 카카오 로그인 하면 카카오에서 닉네임 받아와서 그 닉네임 서버에 저장하고 로그인하기
  //   // 재창님 회원가입시 닉네임 서버에 올려주는 코드 가져오기
  //   console.log('user', user);
  //   console.log('user.data', user.data);
  // };

  // // 컴포넌트가 마운트되면 실행
  // // 여기서 가져온 엑세스 토큰은 state와 localStorage에 저장되어 추후에 카카오 API를 호출할 때 사용됨
  // useEffect(() => {
  //   getAccessToken();
  // }, []);

  return (
    <div>
      <button onClick={KakaoLoginHandler}>카카오로 계속하기</button>
    </div>
  );
};

export default KakaoLogin;


==========================================영재님이랑 해서 code값이 나오기는 함 !!
import { useLocation } from 'react-router-dom';
import { useEffect, useState } from 'react';

// 카카오 로그인 기능 구현 코드
const KakaoLogin = () => {
  const location = useLocation(); // useNavigate hook 사용
  const REST_API_KEY = 'fbbe0ffd8e5a9275920fc4b89603b870'; // 카카오 디벨로퍼스에서 발급받은 REST API키
  const REDIRECT_URI = 'http://localhost:3000/login'; // 카카오 로그인 후 리다이렉트될 URI
  const link = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`; // 인가코드 요청 URL
  const CLIENT_SECRET = 'Tdn2Y3Xx4qXX8mBO2tYbe44g3xwaOj23'; // 카카오 디벨로퍼스에서 발급받은 client secret 키
  // const [code, setCode] = useState<string | null>(null);

  const KakaoLoginHandler = () => {
    window.location.replace(link);
  };

  const code = new URL(window.location.href).searchParams.get('code');
  console.log('code', code);

  //카카오 서버로 클라이언트 시크릿키값과 파라미터의 코드값을 보내 액세스토큰을 요청

  // accessToken을 가지고 다시 한번 더 유저의 정보를 달라고 요청해야함

  // 현재 URL에서 파라미터로 전달된 'code'값을 추출하고
  // useEffect(() => {
  //   const code = new URL(window.location.href).searchParams.get('code');
  //   setCode(code);
  //   console.log('code', code);
  // }, [location]);

  // AccessToken 요청
  // const getAccessToken = async () => {
  //   const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
  //     method: 'POST',
  //     headers: {
  //       'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
  //     },
  //     body: QueryString.stringify({
  //       // QueryString.stringify 함수를 사용해서 요청에 필요한 파라미터 설정
  //       //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
  //       grant_type: 'authorization_code',
  //       client_id: REST_API_KEY,
  //       redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
  //       code: code,
  //       client_secret: CLIENT_SECRET,
  //     }),
  //   })
  //     .then((res) => res.json())
  //     .catch((error) => console.error(error));
  //   console.log('ACCESS_TOKEN', ACCESS_TOKEN);
  //   setAccessToken(ACCESS_TOKEN.access_token); // ACCESS_TOKEN 상태 변수에 엑세스 토큰을 저장
  //   localStorage.setItem('token_for_kakaotalk', ACCESS_TOKEN.access_token); // 로컬 스토리지에도 엑세스 토큰 저장

  //   // 카카오 API에서 사용자 정보 가져오기
  //   const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
  //     headers: {
  //       //access_token이 필요하다
  //       Authorization: `Bearer ${ACCESS_TOKEN.access_token}`, // Authorization 헤더에 엑세스 토큰을 포함하여 요청
  //     },
  //   });

  //   // 카카오 로그인 하면 카카오에서 닉네임 받아와서 그 닉네임 서버에 저장하고 로그인하기
  //   // 재창님 회원가입시 닉네임 서버에 올려주는 코드 가져오기
  //   console.log('user', user);
  //   console.log('user.data', user.data);
  // };

  // // 컴포넌트가 마운트되면 실행
  // // 여기서 가져온 엑세스 토큰은 state와 localStorage에 저장되어 추후에 카카오 API를 호출할 때 사용됨
  // useEffect(() => {
  //   getAccessToken();
  // }, []);

  return (
    <div>
      <button onClick={KakaoLoginHandler}>카카오로 계속하기</button>
    </div>
  );
};

export default KakaoLogin;


========================엄청 잘되지만 setNickName이 안됨

import { useLocation } from 'react-router-dom';
import { useEffect, useState } from 'react';
import QueryString from 'qs';
import axios from 'axios';
// 카카오 로그인 기능 구현 코드
const KakaoLogin = () => {
  const location = useLocation(); // useLocation hook 사용
  const REST_API_KEY = 'fbbe0ffd8e5a9275920fc4b89603b870'; // 카카오 디벨로퍼스에서 발급받은 REST API키
  const REDIRECT_URI = 'http://localhost:3000/login'; // 카카오 로그인 후 리다이렉트될 URI
  const link = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`; // 인가코드 요청 URL
  const CLIENT_SECRET = 'Tdn2Y3Xx4qXX8mBO2tYbe44g3xwaOj23'; // 카카오 디벨로퍼스에서 발급받은 client secret 키
  //주소창에 파라미터code를 가져온다 split 메서드를 활용한다
  const KAKAO_CODE = location.search.split('=')[1];
  //nickname state
  const [nickName, setNickName] = useState('');
  //popcorn id = kakao email
  const [userId, setUserId] = useState('');
  //accessToken state
  const [accessToken, setAccessToken] = useState();
  const KakaoLoginHandler = () => {
    window.location.replace(link);
  };

  const code = new URL(window.location.href).searchParams.get('code');
  console.log('code', code);

  //카카오 서버로 클라이언트 시크릿키값과 파라미터의 코드값을 보내 액세스토큰을 요청
  const getUser = async () => {
    const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
      },
      body: QueryString.stringify({
        //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
        grant_type: 'authorization_code',
        client_id: REST_API_KEY,
        redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
        code: KAKAO_CODE,
        client_secret: CLIENT_SECRET,
      }),
    })
      .then((res) => res.json())
      .catch((error) => console.log('error:', error));

    console.log('ACCESS_TOKEN', ACCESS_TOKEN);
    setAccessToken(ACCESS_TOKEN.access_token);
    console.log('accessToken', accessToken);
    localStorage.setItem('token_for_kakaotalk', ACCESS_TOKEN.access_token);

    const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
      headers: {
        //access_token이 필요하다
        Authorization: `Bearer ${ACCESS_TOKEN.access_token}`,
      },
    });
    setNickName(user.data.properties.nickname);
    setUserId(user.data.kakao_account.email);
    console.log('userId', userId);
    console.log('nickName', nickName);
    console.log('user.data.properties.nickname', user.data.properties.nickname);
    console.log('user.data', user.data);
    console.log('user.data.properties', user.data.properties);
    console.log('user.data.kakao_account', user.data.kakao_account);
    console.log(
      'user.data.kakao_account.profile.nickname',
      user.data.kakao_account.profile.nickname,
    );
    console.log('user.data.kakao_account.email', user.data.kakao_account.email);
    console.log(
      'user.data.kakao_account.age_range',
      user.data.kakao_account.age_range,
    );
  };

  useEffect(() => {
    getUser();
  }, []);

  // accessToken을 가지고 다시 한번 더 유저의 정보를 달라고 요청해야함

  return (
    <div>
      <button onClick={KakaoLoginHandler}>카카오로 계속하기</button>
    </div>
  );
};

export default KakaoLogin;

============================잘되는 코드 

import { useLocation } from 'react-router-dom';
import { useEffect, useState } from 'react';
import QueryString from 'qs';
import axios from 'axios';
// 카카오 로그인 기능 구현 코드
const KakaoLogin = () => {
  const location = useLocation(); // useLocation hook 사용
  const REST_API_KEY = 'fbbe0ffd8e5a9275920fc4b89603b870'; // 카카오 디벨로퍼스에서 발급받은 REST API키
  const REDIRECT_URI = 'http://localhost:3000/login'; // 카카오 로그인 후 리다이렉트될 URI
  const link = `https://kauth.kakao.com/oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code`; // 인가코드 요청 URL
  const CLIENT_SECRET = 'Tdn2Y3Xx4qXX8mBO2tYbe44g3xwaOj23'; // 카카오 디벨로퍼스에서 발급받은 client secret 키
  //주소창에 파라미터code를 가져온다 split 메서드를 활용한다
  const KAKAO_CODE = location.search.split('=')[1];
  //nickname state
  const [nickName, setNickName] = useState('');
  //popcorn id = kakao email
  const [userId, setUserId] = useState('');
  const [age, setAge] = useState('');
  //accessToken state
  const [accessToken, setAccessToken] = useState();

  const KakaoLoginHandler = () => {
    window.location.replace(link);
  };

  const code = new URL(window.location.href).searchParams.get('code');
  console.log('code', code);

  //카카오 서버로 클라이언트 시크릿키값과 파라미터의 코드값을 보내 액세스토큰을 요청
  const getUser = async () => {
    const ACCESS_TOKEN = await fetch('https://kauth.kakao.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
      },
      body: QueryString.stringify({
        //엑세스 토큰을 요청하기위해 필요한 토큰과 key값들
        grant_type: 'authorization_code',
        client_id: REST_API_KEY,
        redirect_uri: REDIRECT_URI, //위쪽에 전부 변수로 지정해주었기에불러오기만 하면된다
        code: KAKAO_CODE,
        client_secret: CLIENT_SECRET,
      }),
    })
      .then((res) => res.json())
      .catch((error) => console.log('error:', error));

    console.log('ACCESS_TOKEN', ACCESS_TOKEN);
    setAccessToken(ACCESS_TOKEN.access_token);
    console.log('accessToken', accessToken);
    localStorage.setItem('token_for_kakaotalk', ACCESS_TOKEN.access_token);

    const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
      headers: {
        //access_token이 필요하다
        Authorization: `Bearer ${ACCESS_TOKEN.access_token}`,
      },
    });
    setNickName(user.data.properties.nickname);
    setUserId(user.data.kakao_account.email);
    setAge(user.data.kakao_account.age_range);

    console.log('user.data.properties.nickname', user.data.properties.nickname);
    console.log('user.data', user.data);
    console.log('user.data.properties', user.data.properties);
    console.log('user.data.kakao_account', user.data.kakao_account);
    console.log(
      'user.data.kakao_account.profile.nickname',
      user.data.kakao_account.profile.nickname,
    );
    console.log('user.data.kakao_account.email', user.data.kakao_account.email);
    console.log(
      'user.data.kakao_account.age_range',
      user.data.kakao_account.age_range,
    );
  };
  console.log('nickName', nickName);
  console.log('userId', userId);
  console.log('age', age);

  useEffect(() => {
    getUser();
  }, []);

  // accessToken을 가지고 다시 한번 더 유저의 정보를 달라고 요청해야함

  return (
    <div>
      <button onClick={KakaoLoginHandler}>카카오로 계속하기</button>
    </div>
  );
};

export default KakaoLogin;
